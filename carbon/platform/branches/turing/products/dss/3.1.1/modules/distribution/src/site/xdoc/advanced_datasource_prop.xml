<!--
  ~ Copyright 2005-2007 WSO2, Inc. (http://wso2.com)
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~ http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN"
        "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
    <body>
        <p>[<a
                href="http://wso2.com/products/data-services-server/">Download</a>]
            | [<a href="index_docs.html">Documentation Home</a>] | [<a
                    href="release_notes.html">Release Note</a>]
        </p>
        <h1>Advanced Data Source Properties in RDBMS Data Sources</h1>
        <p>
            <b>Introduction</b>
        </p>
        <hr/>
        <p>The Tomcat JDBC Connection Pool(org.apache.tomcat.jdbc.pool) has been used by the RDBMS data-sources and advanced data-source properties helps users to define additional properties when creating data-source from a database.</p>
        <p>These advanced data-source properties comes under add data-source page. </p>
        <p>
            <img alt="Advanced Data Source Properties" src="./images/user-guide/advanced-datasource-prop/advanced_datasource_prop.png"/>
            <br/>
        </p>
        <p>Available advanced data-source property details are described below.</p>

        <table class="bodyTable">
            <thead>
               <tr>
                   <td width="15%">Property Name</td>
                   <td width="85%">Description</td>
               </tr>
            </thead>
            <tbody>
                <tr class="a">
                    <td>Transaction Isolation</td>
                    <td>The default TransactionIsolation state of connections created by this pool. One of the following:
		    <ul>
                    <li>TRANSACTION_UNKNOWN</li>
 		    <li>TRANSACTION_NONE</li>
		    <li>TRANSACTION_READ_COMMITTED</li>
                    <li>TRANSACTION_READ_UNCOMMITTED</li>
                    <li>TRANSACTION_REPEATABLE_READ</li>
                    <li>TRANSACTION_SERIALIZABLE</li>
		    </ul>
		    </td>
                </tr>
                <tr>
                    <td>Initial Size</td>
                    <td>(int)The initial number of connections that are created when the pool is started. Default value is 0</td>
                </tr>
                <tr>
                    <td>Max. Active</td>
                    <td>(int) The maximum number of active connections that can be allocated from this pool at the same time. The default value is 100</td>
                </tr>
                <tr>
                    <td>Max. Idle</td>
                    <td>(int) The maximum number of connections that should be kept in the pool at all times. Default value is 8. Idle connections are checked periodically (if enabled) and connections that been idle for longer than minEvictableIdleTimeMillis  will be released. (also see testWhileIdle)</td>
                </tr>
                <tr>
                    <td>Min. Idle</td>
                    <td>(int) The minimum number of established connections that should be kept in the pool at all times. The connection pool can shrink below this number if validation queries fail. Default value is 0 (also see testWhileIdle) </td>
                </tr>
                <tr>
                    <td>Max. Wait</td>
                    <td>(int) The maximum number of milliseconds that the pool will wait (when there are no available connections) for a connection to be returned before throwing an exception. Default value is 30000 (30 seconds)</td>
                </tr>
                <tr>
                    <td>Validation Query</td>
                    <td>(String) The SQL query that will be used to validate connections from this pool before returning them to the caller. If specified, this query does not have to return any data, it just can't throw a SQLException. The default value is null. Example values are SELECT 1(mysql), select 1 from dual(oracle), SELECT 1(MS Sql Server)</td>
                </tr>
                
                <tr>
                    <td>Test On Return</td>
                    <td>(boolean) The indication of whether objects will be validated before being returned to the pool. NOTE - for a true value to have any effect, the validationQuery parameter must be set to a non-null string. The default value is false. </td>
                </tr>
		<tr>
                    <td>Test On Borrow</td>
                    <td>(boolean) The indication of whether objects will be validated before being borrowed from the pool. If the object fails to validate, it will be dropped from the pool, and we will attempt to borrow another. NOTE - for a true value to have any effect, the validationQuery parameter must be set to a non-null string. In order to have a more efficient validation, see validationInterval. Default value is false</td>
                </tr>
		<tr>
                    <td>Test While Idle</td>
                    <td>(boolean) The indication of whether objects will be validated by the idle object evictor (if any). If an object fails to validate, it will be dropped from the pool. NOTE - for a true value to have any effect, the validationQuery parameter must be set to a non-null string. The default value is false and this property has to be set in order for the pool cleaner/test thread is to run (also see timeBetweenEvictionRunsMillis) </td>
                </tr>
		<tr>
                    <td>Time Between Eviction Runs Mills</td>
                    <td>(int) The number of milliseconds to sleep between runs of the idle connection validation/cleaner thread. This value should not be set under 1 second. It dictates how often we check for idle, abandoned connections, and how often we validate idle connections. The default value is 5000 (5 seconds). </td>
                </tr>
		<tr>
                    <td>Minimum Evictable Idle Time</td>
                    <td>(int) The minimum amount of time an object may sit idle in the pool before it is eligible for eviction. The default value is 60000 (60 seconds).</td>
                </tr>
		<tr>
                    <td>Remove Abandoned</td>
                    <td>(boolean) Flag to remove abandoned connections if they exceed the removeAbandonedTimout. If set to true a connection is considered abandoned and eligible for removal if it has been in use longer than the removeAbandonedTimeout Setting this to true can recover db connections from applications that fail to close a connection. See also logAbandoned  The default value is false.</td>
                </tr>
		<tr>
                    <td>Remove Abandoned Timeout</td>
                    <td>(int) Timeout in seconds before an abandoned(in use) connection can be removed. The default value is 60 (60 seconds). The value should be set to the longest running query your applications might have.</td>
                </tr>
		<tr>
                    <td>Log Abandoned</td>
                    <td>(boolean) Flag to log stack traces for application code which abandoned a Connection. Logging of abandoned Connections adds overhead for every Connection borrow because a stack trace has to be generated. The default value is false.</td>
                </tr>
		<tr>
                    <td>Auto Commit</td>
                    <td>(boolean) The default auto-commit state of connections created by this pool. If not set, default is JDBC driver default (If not set then the setAutoCommit method will not be called.)</td>
                </tr>
		<tr>
                    <td>Default Read Only</td>
                    <td>(boolean) The default read-only state of connections created by this pool. If not set then the setReadOnly method will not be called. (Some drivers don't support read only mode, ex: Informix)</td>
                </tr>
		<tr>
                    <td>Default Catalog</td>
                    <td>(String) The default catalog of connections created by this pool.</td>
                </tr>
		<tr>
                    <td>Validator Class Name</td>
                    <td>(String) The name of a class which implements the org.apache.tomcat.jdbc.pool.Validator interface and provides a no-arg constructor (may be implicit). If specified, the class will be used to create a Validator instance which is then used instead of any validation query to validate connections. The default value is null. An example value is com.mycompany.project.SimpleValidator. </td>
                </tr>
		<tr>
                    <td>Connection Properties</td>
                    <td>(String) The connection properties that will be sent to our JDBC driver when establishing new connections. Format of the string must be [propertyName=property;]* NOTE - The "user" and "password" properties will be passed explicitly, so they do not need to be included here. The default value is null.</td>
                </tr>
		<tr>
                    <td>Init SQL</td>
                    <td>The ability to run a SQL statement exactly once, when the connection is created.</td>
                </tr>
		<tr>
                    <td>JDBC Interceptors</td>
                    <td>Flexible and pluggable interceptors to create any customizations around the pool, the query execution and the result set handling.</td>
                </tr>
		<tr>
                    <td>Validation Interval</td>
                    <td>(long) avoid excess validation, only run validation at most at this frequency - time in milliseconds. If a connection is due for validation, but has been validated previously within this interval, it will not be validated again. The default value is 30000 (30 seconds).</td>
                </tr>
		<tr>
                    <td>JMX Enabled</td>
                    <td>(boolean) Register the pool with JMX or not. The default value is true.</td>
                </tr>
		<tr>
                    <td>Fair Queue</td>
                    <td>(boolean) Set to true if you wish that calls to getConnection should be treated fairly in a true FIFO fashion. This uses the org.apache.tomcat.jdbc.pool.FairBlockingQueue  implementation for the list of the idle connections. The default value is true. This flag is required when you want to use asynchronous connection retrieval.
Setting this flag ensures that threads receive connections in the order they arrive.
During performance tests, there is a very large difference in how locks and lock waiting is implemented. When fairQueue=true there is a decision making process based on what operating system the system is running. If the system is running on Linux (property os.name=Linux. To disable this Linux specific behavior and still use the fair queue, simply add the property org.apache.tomcat.jdbc.pool.FairBlockingQueue.ignoreOS=true to your system properties before the connection pool classes are loaded.</td>
                </tr>
		<tr>
                    <td>Abandon When Percentage Full</td>
                    <td>(int) Connections that have been abandoned (timed out) wont get closed and reported up unless the number of connections in use are above the percentage defined by abandonWhenPercentageFull. The value should be between 0-100. The default value is 0, which implies that connections are eligible for closure as soon as removeAbandonedTimeout has been reached.</td>
                </tr>
		<tr>
                    <td>Max Age</td>
                    <td>(long) Time in milliseconds to keep this connection. When a connection is returned to the pool, the pool will check to see if the now - time-when-connected > maxAge has been reached, and if so, it closes the connection rather than returning it to the pool. The default value is 0, which implies that connections will be left open and no age check will be done upon returning the connection to the pool.</td>
                </tr>
		<tr>
                    <td>Use Equals</td>
                    <td>(boolean) Set to true if you wish the ProxyConnection class to use String.equals and set to false  when you wish to use == when comparing method names. This property does not apply to added interceptors as those are configured individually. The default value is true.</td>
                </tr>
		<tr>
                    <td>Suspect Timeout</td>
                    <td>(int) Timeout value in seconds. Default value is 0.
Similar to to the removeAbandonedTimeout value but instead of treating the connection as abandoned, and potentially closing the connection, this simply logs the warning if logAbandoned is set to true. If this value is equal or less than 0, no suspect checking will be performed. Suspect checking only takes place if the timeout value is larger than 0 and the connection was not abandoned or if abandon check is disabled. If a connection is suspect a WARN message gets logged and a JMX notification gets sent once.</td>
                </tr>
		<tr>
                    <td>Alternate User Name Allowed</td>
                    <td>(boolean) By default, the jdbc-pool will ignore the DataSource.getConnection(username,password)  call, and simply return a previously pooled connection under the globally configured properties username and password, for performance reasons.<br/>

<br/>The pool can however be configured to allow use of different credentials each time a connection is requested. To enable the functionality described in the DataSource.getConnection(username,password) call, simply set the property alternateUsernameAllowed to true.
Should you request a connection with the credentials user1/password1 and the connection was previously connected using different user2/password2, the connection will be closed, and reopened with the requested credentials. This way, the pool size is still managed on a global level, and not on a per schema level.
The default value is false.</td>
                </tr>
            </tbody>
            </table>
           
            <p>To find more details about data source configuration parameters refer to
            <a href="http://tomcat.apache.org/tomcat-7.0-doc/jdbc-pool.html">http://tomcat.apache.org/tomcat-7.0-doc/jdbc-pool.html</a>.</p>
    </body>
</html>
