/*
 *
 *   Copyright (c) 2005-2011, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 *   WSO2 Inc. licenses this file to you under the Apache License,
 *   Version 2.0 (the "License"); you may not use this file except
 *   in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an
 *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *  KIND, either express or implied.  See the License for the
 *  specific language governing permissions and limitations
 *  under the License.
 * /
 */
package org.wso2.dss.sample.rdbms;

import org.apache.axiom.om.OMElement;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.testng.annotations.Test;
import org.wso2.carbon.dataservices.samples.dtp_sample.DTPSampleServiceStub;
import org.wso2.carbon.dataservices.samples.dtp_sample.DataServiceFault;
import org.wso2.dss.sample.DSSTestUtils;

import java.rmi.RemoteException;

import static org.testng.Assert.assertEquals;

/**
 * Tests for distributed transaction processing
 */
public class DTPSampleTestCase {

    private final String SERVICE_EPR = DSSTestUtils.SERVICE_BASE_EPR + "DTPSampleService";

    private static final Log log = LogFactory.getLog(DTPSampleTestCase.class);

    @Test(groups = {"wso2.dss"})
    public void testXACreateSingleAccount() throws RemoteException, DataServiceFault {

        log.info("Running DTPSampleTestCase#testXACreateSingleAccount");
        DTPSampleServiceStub stub = new DTPSampleServiceStub(SERVICE_EPR);
        stub._getServiceClient().getOptions().setManageSession(true);
        stub.begin_boxcar();
        stub.addAccountToBank1(100.0);
        OMElement result = stub.end_boxcar();
        int id = this.getAutoGeneratedIdFromElement(result);
        assertEquals(stub.getAccountBalanceFromBank1(id), 100.0, "Balance should be equal to 100.0");

    }

    private int getAutoGeneratedIdFromElement(OMElement el) {
    	OMElement entryElement = (OMElement)(el.getChildrenWithLocalName("Entry").next());
    	OMElement idElement = (OMElement) (entryElement.getChildrenWithLocalName("ID").next());
    	String idStr = idElement.getText();
        return Integer.parseInt(idStr);
    }

    @Test(groups = {"wso2.dss"})
    public void testXACreateSingleAccountNoStreamingResult() throws DataServiceFault, RemoteException {

        log.info("Running DTPSampleTestCase#testXACreateSingleAccountNoStreamingResult");
        DTPSampleServiceStub stub = new DTPSampleServiceStub(SERVICE_EPR);
        stub._getServiceClient().getOptions().setManageSession(true);
        stub.begin_boxcar();
        stub.addAccountToBank2(144.0);
        OMElement result = stub.end_boxcar();
        int id = this.getAutoGeneratedIdFromElement(result);
        assertEquals(stub.getAccountBalanceFromBank2(id), 144.0, "Balance should be equal to 144.0");

    }

    @Test(groups = {"wso2.dss"})
    public void testDistributedTransactionSuccess() throws RemoteException, DataServiceFault {

        log.info("Running DTPSampleTestCase#testDistributedTransactionSuccess");
        DTPSampleServiceStub stub = new DTPSampleServiceStub(SERVICE_EPR);
        stub._getServiceClient().getOptions().setManageSession(true);
        int id1 = stub.addAccountToBank1(50.0)[0].getID().intValue();
        int id2 = stub.addAccountToBank2(75.0)[0].getID().intValue();
        stub.begin_boxcar();
        stub.addToAccountBalanceInBank1(id1, -25);
        stub.addToAccountBalanceInBank2(id2, 25);
        stub.end_boxcar();
        assertEquals(stub.getAccountBalanceFromBank1(id1), 25.0, "Balance  should be equal to 25");
        assertEquals(stub.getAccountBalanceFromBank2(id2), 100.0, "Balance should be equal to 100");

    }

    @Test(groups = {"wso2.dss"}, expectedExceptions = Exception.class)
    public void testDistributedTransactionFail() throws DataServiceFault, RemoteException {
    	DTPSampleServiceStub stub;
        int id1, id2, id3, id4;

        log.info("Running DTPSampleTestCase#testDistributedTransactionFail");
        stub = new DTPSampleServiceStub(SERVICE_EPR);
        stub._getServiceClient().getOptions().setManageSession(true);
        id1 = stub.addAccountToBank1(11500.0)[0].getID().intValue();
        id2 = stub.addAccountToBank2(2000.0)[0].getID().intValue();
        id3 = stub.addAccountToBank2(1200.0)[0].getID().intValue();
        id4 = stub.addAccountToBank2(3000.0)[0].getID().intValue();
        stub.begin_boxcar();
        stub.addToAccountBalanceInBank2(id2, 1500);
        stub.addToAccountBalanceInBank2(id3, 500);
        stub.addToAccountBalanceInBank2(id4, 700);
        /* this should fail, validation error, value < -2000 */
        stub.addToAccountBalanceInBank1(id1, -2700);
        stub.end_boxcar();


        assertEquals(stub.getAccountBalanceFromBank1(id1), 11500.0, "Balance should be 11500 after transaction fails");
        assertEquals(stub.getAccountBalanceFromBank2(id2), 2000.0, "Balance should be 2000 after transaction fails");
        assertEquals(stub.getAccountBalanceFromBank2(id3), 1200.0, "Balance should be 1200 after transaction fails");
        assertEquals(stub.getAccountBalanceFromBank2(id4), 3000.0, "Balance should be 3000 after transaction fails");


    }

    @Test(groups = {"wso2.dss"})
    public void testDefaultValues() throws DataServiceFault, RemoteException {

        log.info("Running DTPSampleTestCase#testDefaultValues");
        DTPSampleServiceStub stub = new DTPSampleServiceStub(SERVICE_EPR);
        stub._getServiceClient().getOptions().setManageSession(true);
        stub.begin_boxcar();
        stub.addAccountToBank1(Double.NaN);
        OMElement result = stub.end_boxcar();
        int id = this.getAutoGeneratedIdFromElement(result);
        assertEquals(stub.getAccountBalanceFromBank1(id), 0.0, "Balance should be 0.0 as default value");
    }

}
