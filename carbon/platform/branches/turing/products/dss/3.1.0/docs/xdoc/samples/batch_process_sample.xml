<!--
  ~ Copyright 2005-2007 WSO2, Inc. (http://wso2.com)
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~ http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<html>
    <body>
        <p>[<a
                href="http://wso2.org/downloads/solutions/data-services">Download</a>]
            | [<a href="../index_docs.html">Documentation Home</a>] | [<a
                href="../release_notes.html">Release Note</a>]
        </p>
        <h1>Batch Processing Sample</h1>
        <h2>Introduction</h2>
        <p>
            Batch processing is used when a specific in-only operation must be ran sequencially with different parameter sets. Here we will be demonstrating a data service where batch processing is enabled, and the necessory batch operations are automatically created.
        </p>
        <h2>Prerequisites</h2>
        <p>
            The sample data service "BatchRequestSample" should be deployed as per the instructions mentioned in <a href="deploying_samples.html">Deploying Samples</a> section.
        </p>
        <h2>Running the Sample</h2>
        <p>The sample service can be run using the "tryit" tool, which is bundled with <a href="http://wso2.org/projects/data-services-server/java">WSO2 Data Services Server</a>, or a code-generated java client sample using this service is demonstrated in the <a href="ds_clients.html">Data Services Clients Sample</a> section.
        </p>
        <h2>Sample Run</h2>
        <p>
            The command line application is used here to present the functionality of batch processing. As shown in <a href="ds_clients.html">Data Services Clients Sample</a>, run the command "ant batch_request", to run the sample. The output will resemble the following. <br />
            <p>
            <img src="../images/samples/batch_sample_img1.png" /> <br />
            Figure 1: Batch process operation invocation.
            </p>            
            The sample tests batch processing by executing a batch operation with three parameter tests, which means, it's effectively executing three consecutive operations. The operation is to add a new employee to the database. Here we will be executing the batch operation and check for the existance of the three newly added entries. A requirement of batch operations are, if one invocation fails, then all the other operations in the batch should fail. This can be seen here, where the sets of three employee entries are either inserted together, or neither of them haven been inserted. In this sample, a validator is used for checking if a valid email address is given when adding a new employee entry to the database, if the email is invalid, that operation invocation would fail. <br /><br />

There are such four batch requests done here, the summary of them are explained below.
            <ol>
               <li>All the parameters have been added properly, and all operations executed successfully, thus when checking for the existance of entries with ids "180000", "180001", "180002", all returns true.
               </li>
               <li>Here the requests with ids "180003" is executed successfully, but when it reaches "180004", a validation error occurs since the email address is invalid, and all the service invocation in that batch request is rolled back. So in the next section when checking for the existance of the employee ids belonging to this batch request, no one would have been added to the database, this is as predicted because all the operations in a batch operation is executed in a single transaction.
               </li>
               <li>In this instance, the 3'rd operation in the batch request is not given an email address, and this causes a validation error, thus the transaction is rolled back and all the ids "180006", "180007" and "180008" are not executed.
               </li>
               <li>The requests here are all given valid parameters, same as in the 1'st request, so all the records "180009", "180010" and "180011" are added successfully.
               </li>
            </ol>

            <p>
            So with the above demonstration, we have showed how the batch operations behave in a transactional manner.
            </p>

        </p>
    </body>
</html>
