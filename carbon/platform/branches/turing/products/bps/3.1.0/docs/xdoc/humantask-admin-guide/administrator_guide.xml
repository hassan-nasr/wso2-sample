<?xml version="1.0" encoding="ISO-8859-1"?>
<!--
 ~ Copyright (c) WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 ~
 ~ WSO2 Inc. licenses this file to you under the Apache License,
 ~ Version 2.0 (the "License"); you may not use this file except
 ~ in compliance with the License.
 ~ You may obtain a copy of the License at
 ~
 ~    http://www.apache.org/licenses/LICENSE-2.0
 ~
 ~ Unless required by applicable law or agreed to in writing,
 ~ software distributed under the License is distributed on an
 ~ "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 ~ KIND, either express or implied.  See the License for the
 ~ specific language governing permissions and limitations
 ~ under the License.
 -->
<!DOCTYPE html
        PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
    <head>
        <title>@product.name@ - Administration and Configuration Guide For Human Tasks</title>
        <link href="../css/bps-docs.css" rel="stylesheet"/>
        <link href="styles/dist-docs.css" rel="stylesheet" type="text/css" media="all"/>
    </head>
    <body>
        <h1>Administration and Configuration Guide For Human Tasks</h1>

        <h3>Table of Content</h3>
        <ul>
            <li><a href="#Implementing-A-People-Query-Evaluator">Writing Your Own PeopleQueryEvaluator</a></li>
            <li><a href="#Task-Instance-Cleanup">Task Instance Cleanup</a></li>
            <li><a href="#Task-Event-Listener">Task Event Listeners</a></li>
        </ul>

        <h2 id="Implementing-A-People-Query-Evaluator">Writing Your Own PeopleQueryEvaluator</h2>

        <p>
            The default people query evaluator class in WSO2 BPS @product.version@ is based on the Carbon
            User Manager API. But if you wish you use a different people query evaluator mechanism, it is possible
            to plug in a different class which implements an interface in the human task core package.
            In order to write your people query evaluator you'll need to write a Java class implementing
            <b>org.wso2.carbon.humantask.core.engine.PeopleQueryEvaluator</b>. You can find the relevant JARs
            having this interface in the <b>BPS_HOME/repository/component/plugins</b> folder.
        </p>

        <p>
            An outline of the methods to be implemented is given below.
        </p>


        <pre class="java5" style="font-family:monospace;"><span style="color: #000000; font-weight: bold;">public</span> <span style="color: #000000; font-weight: bold;">interface</span> PeopleQueryEvaluator <span style="color: #009900;">&#123;</span>
    <span style="color: #008000; font-style: italic; font-weight: bold;">/**
     * Check whether if the given username exist in the user store.
     *
     * @param userName : The user name to be checked.
     * @return : true if the user exist.
     */</span>
    <span style="color: #006600; font-weight: bold;">boolean</span> isExistingUser<span style="color: #009900;">&#40;</span><span style="color: #003399; font-weight: bold;">String</span> userName<span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>

    <span style="color: #008000; font-style: italic; font-weight: bold;">/**
     * Check whether if the given roleName exists in the user store.
     *
     * @param roleName : The roleName to be checked.
     * @return : true if the roleName exists in the user store.
     */</span>
    <span style="color: #006600; font-weight: bold;">boolean</span> isExistingRole<span style="color: #009900;">&#40;</span><span style="color: #003399; font-weight: bold;">String</span> roleName<span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>

    <span style="color: #008000; font-style: italic; font-weight: bold;">/**
     * Checks whether the are users for the given roleName.
     *
     * @param roleName : The role name.
     * @return : True if there are users for the given roleName. false otherwise.
     */</span>
    <span style="color: #006600; font-weight: bold;">boolean</span> hasUsersForRole<span style="color: #009900;">&#40;</span><span style="color: #003399; font-weight: bold;">String</span> roleName<span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>

    <span style="color: #008000; font-style: italic; font-weight: bold;">/**
     * Returns the list of user names in the user store for the given role name.
     *
     * @param roleName : The role name.
     * @return : The list of user names for the given role name.
     */</span>
    List<span style="color: #339933;">&lt;</span>String<span style="color: #339933;">&gt;</span> getUserNameListForRole<span style="color: #009900;">&#40;</span><span style="color: #003399; font-weight: bold;">String</span> roleName<span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>

    <span style="color: #008000; font-style: italic; font-weight: bold;">/**
     * Returns the list of matching roles for a given user name.
     *
     * @param userName : The user name to get the list of roles.
     * @return : The list of matching role names.
     */</span>
    List<span style="color: #339933;">&lt;</span>String<span style="color: #339933;">&gt;</span> getRoleNameListForUser<span style="color: #009900;">&#40;</span><span style="color: #003399; font-weight: bold;">String</span> userName<span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>

    <span style="color: #008000; font-style: italic; font-weight: bold;">/**
     * Creates a new org entity object for the given roleName
     *
     * @param roleName : The name of the role.
     * @return : the created object.
     */</span>
    OrganizationalEntityDAO createGroupOrgEntityForRole<span style="color: #009900;">&#40;</span><span style="color: #003399; font-weight: bold;">String</span> roleName<span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>

    <span style="color: #008000; font-style: italic; font-weight: bold;">/**
     * Creates a new org entity object for the given user name
     *
     * @param userName : The name of the user.
     * @return : the created object.
     */</span>
    OrganizationalEntityDAO createUserOrgEntityForName<span style="color: #009900;">&#40;</span><span style="color: #003399; font-weight: bold;">String</span> userName<span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>

    <span style="color: #008000; font-style: italic; font-weight: bold;">/**
     * Creates the GenericHumanRoleDAO object for the given role and the role type.
     *
     * @param roleName : the name of the human role.
     * @param type     : The type of the human role.
     * @return : the created GenericHumanRoleDAO object.
     */</span>
    GenericHumanRoleDAO createGHRForRoleName<span style="color: #009900;">&#40;</span><span style="color: #003399; font-weight: bold;">String</span> roleName,
                                             GenericHumanRoleDAO.<span style="color: #006633;">GenericHumanRoleType</span> type<span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>

    <span style="color: #008000; font-style: italic; font-weight: bold;">/**
     * checks if the given list of orgEntities exists in the user store.
     *
     * @param orgEntities : The list of orgEntities to be checked.
     */</span>
    <span style="color: #006600; font-weight: bold;">void</span> checkOrgEntitiesExist<span style="color: #009900;">&#40;</span>List<span style="color: #339933;">&lt;</span>OrganizationalEntityDAO<span style="color: #339933;">&gt;</span> orgEntities<span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>

    <span style="color: #008000; font-style: italic; font-weight: bold;">/**
     * checks if the given list orgEntity exists in the user store.
     *
     * @param orgEntity : The orgEntity to be checked.
     * @throws : @see: HumanTaskRuntimeException if the org entities does not exist.
     */</span>
    <span style="color: #006600; font-weight: bold;">void</span> checkOrgEntityExists<span style="color: #009900;">&#40;</span>OrganizationalEntityDAO orgEntity<span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>

    <br/>
    <span style="color: #006600; font-weight: bold;">boolean</span> isOrgEntityInRole<span style="color: #009900;">&#40;</span>OrganizationalEntityDAO entity,
                                     GenericHumanRoleDAO role<span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
    <br/>
    <span style="color: #008000; font-style: italic; font-weight: bold;">/**
     * Returns the currently logged in user's user name.
     *
     * @return : The user name of the logged in user.
     */</span>
    <span style="color: #003399; font-weight: bold;">String</span> getLoggedInUser<span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
<span style="color: #009900;">&#125;</span>
        </pre>

        <p>
            Once the custom people query evaluator class is bungled as a JAR file, it should be copied to
            <b>BPS_HOME/repository/component/lib</b> folder and restart the server for the new implementation
            to be used.You also need to give the fully qualified class name of the new implementation in the
            human task configuration file (<b>BPS_HOME/repository/conf/humantask.xml</b>)
        </p>

        <pre class="xml" style="font-family:monospace;">    <span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;PeopleQueryEvaluatorConfig<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>
        <span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;PeopleQueryEvaluatorClass<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>org.wso2.carbon.humantask.core.integration.CarbonUserManagerBasedPeopleQueryEvaluator<span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;/PeopleQueryEvaluatorClass<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>
    <span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;/PeopleQueryEvaluatorConfig<span style="color: #000000; font-weight: bold;">&gt;</span></span></span></pre>


        <h2 id="Task-Instance-Cleanup">Task Instance Cleanup</h2>

        <p>
            With the amount of tasks growing in the database, the completed tasks could be removed using the
            task instance clean up configuration element in the <b>BPS_HOME/repository/conf/humantask.xml</b> file.
            A scheduled task will remove the tasks from the database for the given interval and the task statuses.
            The configuration element is as follows.
        </p>

        <pre class="xml" style="font-family:monospace;">    <span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;TaskCleanupConfig<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>
        <span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;cronExpression<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>0 0 0/4 * * ?<span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;/cronExpression<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>
        <span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;statuses<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>COMPLETED,OBSOLETE<span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;/statuses<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>
    <span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;/TaskCleanupConfig<span style="color: #000000; font-weight: bold;">&gt;</span></span></span></pre>

        <ul>
            <li><b>cronExpression</b> : A valid cron expression as the scheduler interval.</li>
            <li><b>statuses</b> : A list of statuses to be removed. Only statuses at the end of task
            life cycle should be put here. (eg: COMPLETED or OBSOLETE)</li>
        </ul>

         <h2 id="Task-Event-Listener">Task Event Listeners</h2>

        <p>
            You can write custom task event listeners to be triggered on task events. For this you need to implement
            the interface <b>org.wso2.carbon.humantask.core.api.event.HumanTaskEventListener</b>. You can find the relevant JARs
            having this interface in the <b>BPS_HOME/repository/component/plugins</b> folder.
        </p>

        <pre class="java5" style="font-family:monospace;"><span style="color: #000000; font-weight: bold;">public</span> <span style="color: #000000; font-weight: bold;">interface</span> HumanTaskEventListener <span style="color: #009900;">&#123;</span>

    <span style="color: #008000; font-style: italic; font-weight: bold;">/**
     * This method will be called by the human task engine when a new event is generated.
     * The listener logic should be implemented in the method body.
     *
     * @param taskEventInfo : A final object containing the context information related to the
     * task event and the task itself.
     */</span>
    <span style="color: #000000; font-weight: bold;">public</span> <span style="color: #006600; font-weight: bold;">void</span> onEvent<span style="color: #009900;">&#40;</span>TaskEventInfo taskEventInfo<span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
<span style="color: #009900;">&#125;</span></pre>

        <p>
            The onEvent method will be called with <b>org.wso2.carbon.humantask.core.api.event.TaskEventInfo</b> object
            which holds the following information about the task.
        </p>

        <ul>
            <li><a href="#task-info-list" >Task Information</a> of the related task</li>
            <li>Event Initiator : The user who initiated this task event</li>
            <li>The time stamp of the event</li>
            <li>The event type : This would be the task action (org.wso2.carbon.humantask.core.dao.TaskEventType)</li>
            <li>Event Details : The details of the task event in applicable</li>
            <li>Old State : The task state before this event occurred</li>
            <li>New State : The task state after this event occurred</li>
        </ul>

        <p>
            The <b>org.wso2.carbon.humantask.core.api.event.TaskInfo</b> object would holde the following information
            regarding a task.
        </p>


        <ul id="task-info-list">
            <li>Task Id</li>
            <li>Task Name</li>
            <li>Task Description</li>
            <li>Task Presentation Subject</li>
            <li>Task Type</li>
            <li>Task State</li>
            <li>Task State Before Suspension</li>
            <li>Task Owner</li>
            <li>Task Created Date</li>
        </ul>

        <p>
            Once the custom event listener implementation is packed as a JAR file it should be placed in
            <b>$BPS_HOME/repository/components/lib</b> folder. A fully qualified class name entry
            should be added for the task event listeners section in the humantask.xml configuration file
            (<b>BPS_HOME/repository/conf/humantask.xml</b>)
        </p>

        <pre class="xml" style="font-family:monospace;">    <span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;TaskEventListeners<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>
        <span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;ClassName<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>org.foo.bar.EventListener1<span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;/ClassName<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>
        <span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;ClassName<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>org.foo.bar.EventListener2<span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;/ClassName<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>
    <span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;/TaskEventListeners<span style="color: #000000; font-weight: bold;">&gt;</span></span></span></pre>

    </body>
</html>
