<?xml version="1.0" encoding="UTF-8"?>
<!--
 ~ Copyright (c) 2005-2010, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 ~
 ~ WSO2 Inc. licenses this file to you under the Apache License,
 ~ Version 2.0 (the "License"); you may not use this file except
 ~ in compliance with the License.
 ~ You may obtain a copy of the License at
 ~
 ~    http://www.apache.org/licenses/LICENSE-2.0
 ~
 ~ Unless required by applicable law or agreed to in writing,
 ~ software distributed under the License is distributed on an
 ~ "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 ~ KIND, either express or implied.  See the License for the
 ~ specific language governing permissions and limitations
 ~ under the License.
 -->
<!DOCTYPE html
        PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
    <head>
        <title>@product.name@ - Extensions - Flexible Assigns</title>
        <link href="../css/bps-docs.css" rel="stylesheet"/>
        <link href="styles/dist-docs.css" rel="stylesheet" type="text/css" media="all"/>
    </head>
    <body>

       <h1>Flexible Assigns</h1>

        <ul>
            <li>
                <a href="#Auto-Complete-Copy-Destination">Auto Complete Copy Destination (L-Value)</a>
            </li>
            <li>
                <a href="#IgnoreMissingFromData">Add support for the ignoreMissingFromData attribute in &lt;copy&gt;</a>
            </li>
        </ul>
        <br />
        <h2>
            <a name="Auto-Complete-Copy-Destination"></a>
            Auto Complete Copy Destination (L-Value)
        </h2>
        <p>A lot of times, users expect the
            &lt;copy&gt;
            operation in a WS-BPEL assign activity to behave such that the path specified by the destination ("to-spec")
            is automatically created, if it doesn't already exist. By default, if the to-spec used within a
            &lt;copy&gt;
            operation does not select exactly one XML information item during execution, then the standard fault
            bpel:selectionFailure is thrown (as mandated by the spec).
        </p>
        <p>
            To override this default behavior, we introduce a insertMissingToData attribute in the
            &lt;copy&gt;
            operation, which if it is set to "yes", will instruct the runtime to complete the (XPath) L-value specified
            by the to-spec, if no items were selected. For the sake of simplicity, we will complete the to-spec if and
            only if:
        </p>
        <ol>
            <li>It's a path expression whose steps are separated by "/", and</li>
            <li>Its steps have an axis, which is either "child" or "attribute", and</li>
            <li>Its steps have no following predicates, and</li>
            <li>Its steps test the name of a node, without the use of wild cards.</li>
        </ol>
        <p>Formally, the grammar of the to-spec, for which auto-complete is enabled, may be defined in terms of these
            productions:
        </p>
        <pre>
            PathExpr ::= ("/" RelativePathExpr?) | RelativePathExpr
            RelativePathExpr ::= ForwardStep (("/" ) ForwardStep)*
            ForwardStep ::= (ForwardAxis QName) | AbbrevForwardStep
            AbbrevForwardStep ::= "@"? QName
            ForwardAxis ::= ("child" "::") | ("attribute" "::")
        </pre>

        <p>The example below illustrates the use of the insertMissingToData attribute. Let's say that the variable
            "response" is uninitialized. In that case, the first
            &lt;copy&gt;
            operation will fail, whereas the second one will succeed.
        </p>
        <br />
        <h2>
            <a name="IgnoreMissingFromData"></a>
            Add support for the ignoreMissingFromData attribute in &lt;copy&gt;
        </h2>
        <p>The attached patch adds support for the following attributes in the BPEL assign activity's copy operation:</p>
        <ol>
            <li>The optional @ignoreMissingFromData attribute, which if it has the value of "yes", and the from-spec returns zero XML information items, then no bpel:selectionFailure is thrown, and the to-spec is not evaluated.</li>
            <li>An extension @ignoreUninitializedFromVariable attribute, which if it has the value of "yes", and the from-spec contains an uninitialized variable, then no bpel:uninitializedVariable is thrown, and the to-spec is not evaluated.</li>
        </ol>
        <p>
            The informal syntax of the above attributes is shown below:
        </p>
        <pre>
            &lt;copy ignoreMissingFromData="yes|no"? ignoreUninitializedFromVariable="yes|no"?&gt;
                  from-spec to-spec
            &lt;/copy&gt;

        </pre>

    </body>
</html>