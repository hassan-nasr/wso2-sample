CREATE EXTERNAL TABLE IF NOT EXISTS WARD
  (key STRING, webappName STRING, webappOwnerTenant STRING, webappVersion STRING,userId STRING,
  requestTimestamp BIGINT, resourcePath STRING, browser STRING, browserVersion STRING, operatingSystem STRING,
  operatingSystemVersion STRING, searchEngine STRING, country STRING, webappType STRING,
  webappDisplayName STRING, webappContext STRING, sessionId STRING, httpMethod STRING,
  contentType STRING, responseContentType STRING, responseHttpStatusCode INT, remoteAddress STRING, referer STRING,
  remoteUser STRING, authType STRING, userAgent STRING, responseTime BIGINT,
  serverAddess STRING, serverName STRING, tenantId INT, userTenant STRING, requestCount INT, responceCount INT, faultCount INT, requestSizeBytes BIGINT, responseSizeBytes BIGINT)  STORED BY
	'org.apache.hadoop.hive.cassandra.CassandraStorageHandler' WITH SERDEPROPERTIES (
 	"wso2.carbon.datasource.name" = "WSO2BAM_CASSANDRA_DATASOURCE",
	"cassandra.cf.name" = "bam_webapp_statistics",
	"cassandra.columns.mapping" = ":key,
	payload_webappName, meta_webappOwnerTenant, payload_webappVersion, payload_userId,
	payload_timestamp, payload_resourcePath, payload_browser, payload_browserVersion,
	payload_operatingSystem, payload_operatingSystemVersion, payload_searchEngine,
	payload_country, payload_webappType, payload_webappDisplayName, payload_webappContext,
	payload_sessionId, payload_httpMethod, payload_contentType, payload_responseContentType,
	payload_responseHttpStatusCode, payload_remoteAddress, payload_referer, payload_remoteUser,
	payload_authType, payload_userAgent, payload_responseTime, meta_serverAddess,
	meta_serverName, meta_tenantId, meta_userTenant, payload_requestCount, payload_responceCount, payload_faultCount, payload_requestSizeBytes, payload_responseSizeBytes");


CREATE EXTERNAL TABLE IF NOT EXISTS WebappsStatsPerMinutes
	(serverAddess STRING, webappOwnerTenant STRING, webappName STRING, total_request_count INT,total_response_count INT,
	total_fault_count INT,avg_response_time DOUBLE,min_response_time BIGINT,max_response_time BIGINT, year SMALLINT,month SMALLINT,
	day SMALLINT,hour SMALLINT,minute SMALLINT, time STRING) STORED BY
	'org.wso2.carbon.hadoop.hive.jdbc.storage.JDBCStorageHandler' TBLPROPERTIES (
        'wso2.carbon.datasource.name'='WSO2BAM_DATASOURCE',
	'hive.jdbc.update.on.duplicate' = 'true',
	'hive.jdbc.primary.key.fields'='serverAddess,webappOwnerTenant,webappName,year,month,day,hour,minute',
	'hive.jdbc.table.create.query' = 'CREATE TABLE WEBAPP_STATS_SUMMARY_PER_MINUTE (serverAddess VARCHAR(100) NOT NULL, webappOwnerTenant VARCHAR(150), 
	webappName VARCHAR(150), total_request_count INT,total_response_count INT, total_fault_count INT, avg_response_time DOUBLE, 
	min_response_time BIGINT, max_response_time BIGINT, year SMALLINT, month SMALLINT, day SMALLINT, hour SMALLINT, minute SMALLINT, time VARCHAR(30),
	PRIMARY KEY (serverAddess,webappOwnerTenant,webappName,year,month,day,hour,minute))' );
	
insert overwrite table WebappsStatsPerMinutes select serverAddess ,webappOwnerTenant , webappName , 
	sum(requestCount) as total_request_count, sum(responceCount) as total_response_count,
	sum(faultCount) as total_fault_count,avg(responseTime) as avg_response_time,
	min(responseTime) as min_response_time, max(responseTime) as max_response_time,
	year(from_unixtime(cast(requestTimestamp/1000 as BIGINT),'yyyy-MM-dd HH:mm:ss.SSS' )) as year,
	month(from_unixtime(cast(requestTimestamp/1000 as BIGINT),'yyyy-MM-dd HH:mm:ss.SSS' )) as month,
	day(from_unixtime(cast(requestTimestamp/1000 as BIGINT),'yyyy-MM-dd HH:mm:ss.SSS' )) as day,
	hour(from_unixtime(cast(requestTimestamp/1000 as BIGINT),'yyyy-MM-dd HH:mm:ss.SSS' )) as hour, 
	minute(from_unixtime(cast(requestTimestamp/1000 as BIGINT),'yyyy-MM-dd HH:mm:ss.SSS' )) as minute,
	concat(substring(from_unixtime(cast(requestTimestamp/1000 as BIGINT), 'yyyy-MM-dd HH:mm:ss'),0,16),':00') as time from WARD 
	group by year(from_unixtime(cast(requestTimestamp/1000 as BIGINT),'yyyy-MM-dd HH:mm:ss.SSS' )), 
	month(from_unixtime(cast(requestTimestamp/1000 as BIGINT),'yyyy-MM-dd HH:mm:ss.SSS' )), 
	day(from_unixtime(cast(requestTimestamp/1000 as BIGINT),'yyyy-MM-dd HH:mm:ss.SSS' )), 
	hour(from_unixtime(cast(requestTimestamp/1000 as BIGINT),'yyyy-MM-dd HH:mm:ss.SSS' )),
	minute(from_unixtime(cast(requestTimestamp/1000 as BIGINT),'yyyy-MM-dd HH:mm:ss.SSS' )),
	substring(from_unixtime(cast(requestTimestamp/1000 as BIGINT), 'yyyy-MM-dd HH:mm:ss'),0,16),
	serverAddess ,webappOwnerTenant , webappName;

CREATE EXTERNAL TABLE IF NOT EXISTS WebappsStatsPerMinuteDataFetcher (serverAddess STRING, webappOwnerTenant STRING, webappName STRING, total_request_count INT,total_response_count INT,
total_fault_count INT,avg_response_time DOUBLE,min_response_time BIGINT, max_response_time BIGINT, year SMALLINT,month SMALLINT,day SMALLINT,hour SMALLINT,minute SMALLINT,time STRING) 
STORED BY 'org.wso2.carbon.hadoop.hive.jdbc.storage.JDBCStorageHandler' TBLPROPERTIES ( 
'wso2.carbon.datasource.name'='WSO2BAM_DATASOURCE',
'mapred.jdbc.input.table.name' = 'WEBAPP_STATS_SUMMARY_PER_MINUTE' );

CREATE EXTERNAL TABLE IF NOT EXISTS WebappsStatsPerHour (serverAddess STRING, webappOwnerTenant STRING, webappName STRING, total_request_count INT,total_response_count INT,
total_fault_count INT,avg_response_time DOUBLE,min_response_time BIGINT, max_response_time BIGINT, year SMALLINT,month SMALLINT,day SMALLINT,hour SMALLINT, time STRING) 
STORED BY 'org.wso2.carbon.hadoop.hive.jdbc.storage.JDBCStorageHandler' TBLPROPERTIES ( 
'wso2.carbon.datasource.name'='WSO2BAM_DATASOURCE',
'hive.jdbc.update.on.duplicate' = 'true',
'hive.jdbc.primary.key.fields' = 'serverAddess,webappOwnerTenant,webappName,year,month,day,hour',
'hive.jdbc.table.create.query' = 'CREATE TABLE WEBAPP_STATS_SUMMARY_PER_HOUR ( serverAddess VARCHAR(100) NOT NULL, webappOwnerTenant VARCHAR(150),webappName VARCHAR(150),
 total_request_count INT,total_response_count INT,total_fault_count INT,avg_response_time DOUBLE, min_response_time BIGINT,max_response_time BIGINT,
 year SMALLINT, month SMALLINT, day SMALLINT, hour SMALLINT, time VARCHAR(30), PRIMARY KEY (serverAddess,webappOwnerTenant,webappName,year,month,day,hour))' );

insert overwrite table WebappsStatsPerHour select serverAddess,webappOwnerTenant,webappName, sum(total_request_count) as total_request_count, sum(total_response_count) as total_response_count,sum(total_fault_count) as total_fault_count,sum(total_request_count*avg_response_time)/sum(total_request_count) as avg_response_time,min(min_response_time) as min_response_time, max(max_response_time) as max_response_time, year, month, day,hour,concat(substr(time,0,13),':00:00') as time from WebappsStatsPerMinuteDataFetcher group by serverAddess,webappOwnerTenant,webappName,year, month,day,hour,substr(time,0,13);

CREATE EXTERNAL TABLE IF NOT EXISTS WebappsStatsPerDayDataFetcher (serverAddess STRING, webappOwnerTenant STRING, webappName STRING, total_request_count INT,total_response_count INT,
total_fault_count INT,avg_response_time DOUBLE,min_response_time BIGINT, max_response_time BIGINT, year SMALLINT,month SMALLINT,day SMALLINT,hour SMALLINT, time STRING) 
STORED BY 'org.wso2.carbon.hadoop.hive.jdbc.storage.JDBCStorageHandler' TBLPROPERTIES ( 
'wso2.carbon.datasource.name'='WSO2BAM_DATASOURCE',
'mapred.jdbc.input.table.name' = 'WEBAPP_STATS_SUMMARY_PER_HOUR'  );

CREATE EXTERNAL TABLE IF NOT EXISTS WebappsStatsPerDay (serverAddess STRING, webappOwnerTenant STRING, webappName STRING, total_request_count INT,total_response_count INT,
total_fault_count INT,avg_response_time DOUBLE,min_response_time BIGINT, max_response_time BIGINT, year SMALLINT,month SMALLINT,day SMALLINT,time STRING) 
STORED BY 'org.wso2.carbon.hadoop.hive.jdbc.storage.JDBCStorageHandler' TBLPROPERTIES ( 
'wso2.carbon.datasource.name'='WSO2BAM_DATASOURCE',
'hive.jdbc.update.on.duplicate' = 'true',
'hive.jdbc.primary.key.fields' = 'serverAddess,webappOwnerTenant,webappName,year,month,day',
'hive.jdbc.table.create.query' = 'CREATE TABLE WEBAPP_STATS_SUMMARY_PER_DAY ( serverAddess VARCHAR(100) NOT NULL, webappOwnerTenant VARCHAR(150),webappName VARCHAR(150),
total_request_count INT,total_response_count INT,total_fault_count INT,avg_response_time DOUBLE, min_response_time BIGINT,max_response_time BIGINT, 
year SMALLINT, month SMALLINT, day SMALLINT,time VARCHAR(30),PRIMARY KEY (serverAddess,webappOwnerTenant,webappName,year,month,day))' );

insert overwrite table WebappsStatsPerDay select serverAddess,webappOwnerTenant,webappName, sum(total_request_count) as total_request_count, sum(total_response_count) as total_response_count,sum(total_fault_count) as total_fault_count,sum(total_request_count*avg_response_time)/sum(total_request_count) as avg_response_time,min(min_response_time) as min_response_time, max(max_response_time) as max_response_time, year, month, day,substr(time,0,10) as time from WebappsStatsPerDayDataFetcher group by serverAddess,webappOwnerTenant,webappName,year, month,day,substr(time,0,10);


CREATE EXTERNAL TABLE IF NOT EXISTS WebappsStatsPerMonth (serverAddess STRING, webappOwnerTenant STRING, webappName STRING, total_request_count INT,total_response_count INT,
total_fault_count INT,avg_response_time DOUBLE,min_response_time BIGINT, max_response_time BIGINT, year SMALLINT,month SMALLINT, time STRING) 
STORED BY 'org.wso2.carbon.hadoop.hive.jdbc.storage.JDBCStorageHandler' TBLPROPERTIES ( 
'wso2.carbon.datasource.name'='WSO2BAM_DATASOURCE',
'hive.jdbc.update.on.duplicate' = 'true',
'hive.jdbc.primary.key.fields' = 'serverAddess,webappOwnerTenant,webappName,year,month',
'hive.jdbc.table.create.query' = 'CREATE TABLE WEBAPP_STATS_SUMMARY_PER_MONTH ( serverAddess VARCHAR(100) NOT NULL, webappOwnerTenant VARCHAR(150),webappName VARCHAR(150),
total_request_count INT,total_response_count INT,total_fault_count INT,avg_response_time DOUBLE, min_response_time BIGINT,max_response_time BIGINT, 
year SMALLINT, month SMALLINT,time VARCHAR(30),PRIMARY KEY (serverAddess,webappOwnerTenant,webappName,year,month))' );

insert overwrite table WebappsStatsPerMonth select serverAddess,webappOwnerTenant,webappName, sum(total_request_count) as total_request_count, sum(total_response_count) as total_response_count,sum(total_fault_count) as total_fault_count,sum(total_request_count*avg_response_time)/sum(total_request_count) as avg_response_time,min(min_response_time) as min_response_time, max(max_response_time) as max_response_time, year, month,substr(time,0,7) as time from WebappsStatsPerDayDataFetcher group by serverAddess,webappOwnerTenant,webappName,year, month,substr(time,0,7);

CREATE EXTERNAL TABLE IF NOT EXISTS WebappsBrowserStatsPerMinutes
	(serverAddess STRING, webappOwnerTenant STRING, webappName STRING, browser STRING, browserVersion STRING, browserCount BIGINT, year SMALLINT,month SMALLINT,
	day SMALLINT,hour SMALLINT,minute SMALLINT, time STRING) STORED BY
	'org.wso2.carbon.hadoop.hive.jdbc.storage.JDBCStorageHandler' TBLPROPERTIES (
        'wso2.carbon.datasource.name'='WSO2BAM_DATASOURCE',
	'hive.jdbc.update.on.duplicate' = 'true',
	'hive.jdbc.primary.key.fields'='serverAddess,webappOwnerTenant,webappName,browser,browserVersion,year,month,day,hour,minute',
	'hive.jdbc.table.create.query' = 'CREATE TABLE WEBAPP_BROWSER_STATS_SUMMARY_PER_MINUTE (serverAddess VARCHAR(100) NOT NULL, webappOwnerTenant VARCHAR(150), 
	webappName VARCHAR(150), browser VARCHAR(50), browserVersion VARCHAR(20), browserCount INT, 
	year SMALLINT, month SMALLINT, day SMALLINT, hour SMALLINT, minute SMALLINT, time VARCHAR(30), PRIMARY KEY (serverAddess,webappOwnerTenant,webappName,browser,browserVersion,year,month,day,hour,minute))' );

insert overwrite table WebappsBrowserStatsPerMinutes select serverAddess ,webappOwnerTenant , webappName , 
	browser, browserVersion, count(browser) as browserCount,
	year(from_unixtime(cast(requestTimestamp/1000 as BIGINT),'yyyy-MM-dd HH:mm:ss.SSS' )) as year,
	month(from_unixtime(cast(requestTimestamp/1000 as BIGINT),'yyyy-MM-dd HH:mm:ss.SSS' )) as month,
	day(from_unixtime(cast(requestTimestamp/1000 as BIGINT),'yyyy-MM-dd HH:mm:ss.SSS' )) as day,
	hour(from_unixtime(cast(requestTimestamp/1000 as BIGINT),'yyyy-MM-dd HH:mm:ss.SSS' )) as hour, 
	minute(from_unixtime(cast(requestTimestamp/1000 as BIGINT),'yyyy-MM-dd HH:mm:ss.SSS' )) as minute,
	concat(substring(from_unixtime(cast(requestTimestamp/1000 as BIGINT), 'yyyy-MM-dd HH:mm:ss'),0,16),':00') as time from WARD 
	group by year(from_unixtime(cast(requestTimestamp/1000 as BIGINT),'yyyy-MM-dd HH:mm:ss.SSS' )), 
	month(from_unixtime(cast(requestTimestamp/1000 as BIGINT),'yyyy-MM-dd HH:mm:ss.SSS' )), 
	day(from_unixtime(cast(requestTimestamp/1000 as BIGINT),'yyyy-MM-dd HH:mm:ss.SSS' )), 
	hour(from_unixtime(cast(requestTimestamp/1000 as BIGINT),'yyyy-MM-dd HH:mm:ss.SSS' )),
	minute(from_unixtime(cast(requestTimestamp/1000 as BIGINT),'yyyy-MM-dd HH:mm:ss.SSS' )),
	substring(from_unixtime(cast(requestTimestamp/1000 as BIGINT), 'yyyy-MM-dd HH:mm:ss'),0,16),
	serverAddess ,webappOwnerTenant , webappName, browser, browserVersion;
	
CREATE EXTERNAL TABLE IF NOT EXISTS WebappsBrowserStatsPerMinuteDataFetcher (serverAddess STRING, webappOwnerTenant STRING, webappName STRING, browser STRING, browserVersion STRING, browserCount BIGINT, year SMALLINT,month SMALLINT,day SMALLINT,hour SMALLINT,minute SMALLINT,time STRING) 
STORED BY 'org.wso2.carbon.hadoop.hive.jdbc.storage.JDBCStorageHandler' TBLPROPERTIES ( 
'wso2.carbon.datasource.name'='WSO2BAM_DATASOURCE',
'mapred.jdbc.input.table.name' = 'WEBAPP_BROWSER_STATS_SUMMARY_PER_MINUTE' );

CREATE EXTERNAL TABLE IF NOT EXISTS WebappsBrowserStatsPerHour (serverAddess STRING, webappOwnerTenant STRING, webappName STRING, browser STRING, browserVersion STRING, browserCount BIGINT, year SMALLINT,month SMALLINT,day SMALLINT,hour SMALLINT, time STRING) 
STORED BY 'org.wso2.carbon.hadoop.hive.jdbc.storage.JDBCStorageHandler' TBLPROPERTIES ( 
'wso2.carbon.datasource.name'='WSO2BAM_DATASOURCE',
'hive.jdbc.update.on.duplicate' = 'true',
'hive.jdbc.primary.key.fields' = 'serverAddess,webappOwnerTenant,webappName,browser,browserVersion,year,month,day,hour',
'hive.jdbc.table.create.query' ='CREATE TABLE WEBAPP_BROWSER_STATS_SUMMARY_PER_HOUR (serverAddess VARCHAR(100) NOT NULL,webappOwnerTenant VARCHAR(150),webappName VARCHAR(150), 
browser VARCHAR(50), browserVersion VARCHAR(20), browserCount INT, year SMALLINT, month SMALLINT, day SMALLINT, hour SMALLINT, time VARCHAR(30),
PRIMARY KEY (serverAddess,webappOwnerTenant,webappName,browser,browserVersion,year,month,day,hour))' );

insert overwrite table WebappsBrowserStatsPerHour select serverAddess,webappOwnerTenant,webappName, browser, browserVersion, sum(browserCount) as browserCount, year, month, day,hour,concat(substr(time,0,13),':00:00') as time from WebappsBrowserStatsPerMinuteDataFetcher group by serverAddess,webappOwnerTenant,webappName,browser, browserVersion, year, month,day,hour,substr(time,0,13);


CREATE EXTERNAL TABLE IF NOT EXISTS WebappsBrowserStatsPerDayDataFetcher (serverAddess STRING, webappOwnerTenant STRING, webappName STRING, browser STRING, browserVersion STRING, browserCount BIGINT, year SMALLINT,month SMALLINT,day SMALLINT,hour SMALLINT, time STRING) 
STORED BY 'org.wso2.carbon.hadoop.hive.jdbc.storage.JDBCStorageHandler' TBLPROPERTIES ( 
'wso2.carbon.datasource.name'='WSO2BAM_DATASOURCE',
'mapred.jdbc.input.table.name' = 'WEBAPP_BROWSER_STATS_SUMMARY_PER_HOUR'  );

CREATE EXTERNAL TABLE IF NOT EXISTS WebappsBrowserStatsPerDay (serverAddess STRING, webappOwnerTenant STRING, webappName STRING, browser STRING, browserVersion STRING, browserCount BIGINT, year SMALLINT,month SMALLINT,day SMALLINT,time STRING) 
STORED BY 'org.wso2.carbon.hadoop.hive.jdbc.storage.JDBCStorageHandler' TBLPROPERTIES ( 
'wso2.carbon.datasource.name'='WSO2BAM_DATASOURCE',
'hive.jdbc.update.on.duplicate' = 'true',
'hive.jdbc.primary.key.fields' = 'serverAddess,webappOwnerTenant,webappName,browser,browserVersion,year,month,day',
'hive.jdbc.table.create.query' = 'CREATE TABLE WEBAPP_BROWSER_STATS_SUMMARY_PER_DAY ( serverAddess VARCHAR(100) NOT NULL, webappOwnerTenant VARCHAR(150),webappName VARCHAR(150), 
browser VARCHAR(50), browserVersion VARCHAR(20), browserCount INT, year SMALLINT, month SMALLINT, day SMALLINT,time VARCHAR(30),
PRIMARY KEY (serverAddess,webappOwnerTenant,webappName,browser,browserVersion,year,month,day))' );

insert overwrite table WebappsBrowserStatsPerDay select serverAddess,webappOwnerTenant,webappName, browser, browserVersion, sum(browserCount) as browserCount, year, month, day,substr(time,0,10) as time from WebappsBrowserStatsPerDayDataFetcher group by serverAddess,webappOwnerTenant,webappName,browser, browserVersion,year, month,day,substr(time,0,10);

CREATE EXTERNAL TABLE IF NOT EXISTS WebappsBrowserStatsPerMonth (serverAddess STRING, webappOwnerTenant STRING, webappName STRING, browser STRING, browserVersion STRING, browserCount BIGINT,  year SMALLINT,month SMALLINT, time STRING) 
STORED BY 'org.wso2.carbon.hadoop.hive.jdbc.storage.JDBCStorageHandler' TBLPROPERTIES ( 
'wso2.carbon.datasource.name'='WSO2BAM_DATASOURCE',
'hive.jdbc.update.on.duplicate' = 'true',
'hive.jdbc.primary.key.fields' = 'serverAddess,webappOwnerTenant,webappName,browser,browserVersion,year,month',
'hive.jdbc.table.create.query' = 'CREATE TABLE WEBAPP_BROWSER_STATS_SUMMARY_PER_MONTH ( serverAddess VARCHAR(100) NOT NULL, webappOwnerTenant VARCHAR(150),webappName VARCHAR(150), 
browser VARCHAR(50), browserVersion VARCHAR(20), browserCount INT, year SMALLINT, month SMALLINT,time VARCHAR(30),
PRIMARY KEY (serverAddess,webappOwnerTenant,webappName,browser,browserVersion,year,month))' );

insert overwrite table WebappsBrowserStatsPerMonth select serverAddess,webappOwnerTenant,webappName, browser, browserVersion, sum(browserCount) as browserCount, year, month,substr(time,0,7) as time from WebappsBrowserStatsPerDayDataFetcher group by serverAddess,webappOwnerTenant,webappName, browser, browserVersion,year, month,substr(time,0,7);


CREATE EXTERNAL TABLE IF NOT EXISTS WebappsSessionStatsPerMinutes
	(serverAddess STRING, webappOwnerTenant STRING, webappName STRING, sessionCount BIGINT, year SMALLINT,month SMALLINT,
	day SMALLINT,hour SMALLINT,minute SMALLINT, time STRING) STORED BY
	'org.wso2.carbon.hadoop.hive.jdbc.storage.JDBCStorageHandler' TBLPROPERTIES (
        'wso2.carbon.datasource.name'='WSO2BAM_DATASOURCE',
	'hive.jdbc.update.on.duplicate' = 'true',
	'hive.jdbc.primary.key.fields'='serverAddess,webappOwnerTenant,webappName,year,month,day,hour,minute',
	'hive.jdbc.table.create.query' = 'CREATE TABLE WEBAPP_SESSION_STATS_SUMMARY_PER_MINUTE (serverAddess VARCHAR(100) NOT NULL, webappOwnerTenant VARCHAR(150), 
	webappName VARCHAR(150),  sessionCount INT, year SMALLINT, month SMALLINT, day SMALLINT, hour SMALLINT, minute SMALLINT, time VARCHAR(30),
	PRIMARY KEY (serverAddess,webappOwnerTenant,webappName,year,month,day,hour,minute))' );

insert overwrite table WebappsSessionStatsPerMinutes select serverAddess ,webappOwnerTenant , webappName , 
	count(distinct sessionId) as sessionCount,
	year(from_unixtime(cast(requestTimestamp/1000 as BIGINT),'yyyy-MM-dd HH:mm:ss.SSS' )) as year,
	month(from_unixtime(cast(requestTimestamp/1000 as BIGINT),'yyyy-MM-dd HH:mm:ss.SSS' )) as month,
	day(from_unixtime(cast(requestTimestamp/1000 as BIGINT),'yyyy-MM-dd HH:mm:ss.SSS' )) as day,
	hour(from_unixtime(cast(requestTimestamp/1000 as BIGINT),'yyyy-MM-dd HH:mm:ss.SSS' )) as hour, 
	minute(from_unixtime(cast(requestTimestamp/1000 as BIGINT),'yyyy-MM-dd HH:mm:ss.SSS' )) as minute,
	concat(substring(from_unixtime(cast(requestTimestamp/1000 as BIGINT), 'yyyy-MM-dd HH:mm:ss'),0,16),':00') as time from WARD where sessionId != ""
	group by year(from_unixtime(cast(requestTimestamp/1000 as BIGINT),'yyyy-MM-dd HH:mm:ss.SSS' )), 
	month(from_unixtime(cast(requestTimestamp/1000 as BIGINT),'yyyy-MM-dd HH:mm:ss.SSS' )), 
	day(from_unixtime(cast(requestTimestamp/1000 as BIGINT),'yyyy-MM-dd HH:mm:ss.SSS' )), 
	hour(from_unixtime(cast(requestTimestamp/1000 as BIGINT),'yyyy-MM-dd HH:mm:ss.SSS' )),
	minute(from_unixtime(cast(requestTimestamp/1000 as BIGINT),'yyyy-MM-dd HH:mm:ss.SSS' )),
	substring(from_unixtime(cast(requestTimestamp/1000 as BIGINT), 'yyyy-MM-dd HH:mm:ss'),0,16),
	serverAddess ,webappOwnerTenant , webappName;
	
CREATE EXTERNAL TABLE IF NOT EXISTS WebappsSessionStatsPerHour (serverAddess STRING, webappOwnerTenant STRING, webappName STRING, sessionCount BIGINT, year SMALLINT,month SMALLINT,day SMALLINT,hour SMALLINT, time STRING) 
STORED BY 'org.wso2.carbon.hadoop.hive.jdbc.storage.JDBCStorageHandler' TBLPROPERTIES ( 
'wso2.carbon.datasource.name'='WSO2BAM_DATASOURCE',
'hive.jdbc.update.on.duplicate' = 'true',
'hive.jdbc.primary.key.fields' = 'serverAddess,webappOwnerTenant,webappName,year,month,day,hour',
'hive.jdbc.table.create.query' = 'CREATE TABLE WEBAPP_SESSION_STATS_SUMMARY_PER_HOUR ( serverAddess VARCHAR(100) NOT NULL, webappOwnerTenant VARCHAR(150),webappName VARCHAR(150),  
sessionCount INT, year SMALLINT, month SMALLINT, day SMALLINT, hour SMALLINT, time VARCHAR(30), 
PRIMARY KEY (serverAddess,webappOwnerTenant,webappName,year,month,day,hour))' );

insert overwrite table WebappsSessionStatsPerHour select serverAddess ,webappOwnerTenant , webappName , 
	count(distinct sessionId) as sessionCount,
	year(from_unixtime(cast(requestTimestamp/1000 as BIGINT),'yyyy-MM-dd HH:mm:ss.SSS' )) as year,
	month(from_unixtime(cast(requestTimestamp/1000 as BIGINT),'yyyy-MM-dd HH:mm:ss.SSS' )) as month,
	day(from_unixtime(cast(requestTimestamp/1000 as BIGINT),'yyyy-MM-dd HH:mm:ss.SSS' )) as day,
	hour(from_unixtime(cast(requestTimestamp/1000 as BIGINT),'yyyy-MM-dd HH:mm:ss.SSS' )) as hour, 
	concat(substring(from_unixtime(cast(requestTimestamp/1000 as BIGINT), 'yyyy-MM-dd HH:mm:ss'),0,13),':00') as time from WARD where sessionId != ""
	group by year(from_unixtime(cast(requestTimestamp/1000 as BIGINT),'yyyy-MM-dd HH:mm:ss.SSS' )), 
	month(from_unixtime(cast(requestTimestamp/1000 as BIGINT),'yyyy-MM-dd HH:mm:ss.SSS' )), 
	day(from_unixtime(cast(requestTimestamp/1000 as BIGINT),'yyyy-MM-dd HH:mm:ss.SSS' )), 
	hour(from_unixtime(cast(requestTimestamp/1000 as BIGINT),'yyyy-MM-dd HH:mm:ss.SSS' )),
	substring(from_unixtime(cast(requestTimestamp/1000 as BIGINT), 'yyyy-MM-dd HH:mm:ss'),0,13),
	serverAddess ,webappOwnerTenant , webappName;


CREATE EXTERNAL TABLE IF NOT EXISTS WebappsSessionStatsPerDay (serverAddess STRING, webappOwnerTenant STRING, webappName STRING, sessionCount BIGINT, year SMALLINT,month SMALLINT,day SMALLINT,time STRING) 
STORED BY 'org.wso2.carbon.hadoop.hive.jdbc.storage.JDBCStorageHandler' TBLPROPERTIES ( 
'wso2.carbon.datasource.name'='WSO2BAM_DATASOURCE',
'hive.jdbc.update.on.duplicate' = 'true',
'hive.jdbc.primary.key.fields' = 'serverAddess,webappOwnerTenant,webappName,year,month,day',
'hive.jdbc.table.create.query' = 'CREATE TABLE WEBAPP_SESSION_STATS_SUMMARY_PER_DAY ( serverAddess VARCHAR(100) NOT NULL, webappOwnerTenant VARCHAR(150),webappName VARCHAR(150), 
sessionCount INT, year SMALLINT, month SMALLINT, day SMALLINT,time VARCHAR(30),
PRIMARY KEY (serverAddess,webappOwnerTenant,webappName,year,month,day))' );

insert overwrite table WebappsSessionStatsPerDay select serverAddess ,webappOwnerTenant , webappName , 
	count(distinct sessionId) as sessionCount,
	year(from_unixtime(cast(requestTimestamp/1000 as BIGINT),'yyyy-MM-dd HH:mm:ss.SSS' )) as year,
	month(from_unixtime(cast(requestTimestamp/1000 as BIGINT),'yyyy-MM-dd HH:mm:ss.SSS' )) as month,
	day(from_unixtime(cast(requestTimestamp/1000 as BIGINT),'yyyy-MM-dd HH:mm:ss.SSS' )) as day,
	concat(substring(from_unixtime(cast(requestTimestamp/1000 as BIGINT), 'yyyy-MM-dd HH:mm:ss'),0,10),'') as time from WARD where sessionId != ""
	group by year(from_unixtime(cast(requestTimestamp/1000 as BIGINT),'yyyy-MM-dd HH:mm:ss.SSS' )), 
	month(from_unixtime(cast(requestTimestamp/1000 as BIGINT),'yyyy-MM-dd HH:mm:ss.SSS' )), 
	day(from_unixtime(cast(requestTimestamp/1000 as BIGINT),'yyyy-MM-dd HH:mm:ss.SSS' )), 
	substring(from_unixtime(cast(requestTimestamp/1000 as BIGINT), 'yyyy-MM-dd HH:mm:ss'),0,10),
	serverAddess ,webappOwnerTenant , webappName;


CREATE EXTERNAL TABLE IF NOT EXISTS WebappsSessionStatsPerMonth (serverAddess STRING, webappOwnerTenant STRING, webappName STRING, sessionCount BIGINT,  year SMALLINT,month SMALLINT, time STRING) 
STORED BY 'org.wso2.carbon.hadoop.hive.jdbc.storage.JDBCStorageHandler' TBLPROPERTIES ( 
'wso2.carbon.datasource.name'='WSO2BAM_DATASOURCE',
'hive.jdbc.update.on.duplicate' = 'true',
'hive.jdbc.primary.key.fields' = 'serverAddess,webappOwnerTenant,webappName,year,month',
'hive.jdbc.table.create.query' = 'CREATE TABLE WEBAPP_SESSION_STATS_SUMMARY_PER_MONTH ( serverAddess VARCHAR(100) NOT NULL, webappOwnerTenant VARCHAR(150),webappName VARCHAR(150),  
sessionCount INT, year SMALLINT, month SMALLINT,time VARCHAR(30), PRIMARY KEY (serverAddess,webappOwnerTenant,webappName,year,month))' );

insert overwrite table WebappsSessionStatsPerMonth select serverAddess ,webappOwnerTenant , webappName , 
	count(distinct sessionId) as sessionCount,
	year(from_unixtime(cast(requestTimestamp/1000 as BIGINT),'yyyy-MM-dd HH:mm:ss.SSS' )) as year,
	month(from_unixtime(cast(requestTimestamp/1000 as BIGINT),'yyyy-MM-dd HH:mm:ss.SSS' )) as month,
	concat(substring(from_unixtime(cast(requestTimestamp/1000 as BIGINT), 'yyyy-MM-dd HH:mm:ss'),0,7),'') as time from WARD where sessionId != ""
	group by year(from_unixtime(cast(requestTimestamp/1000 as BIGINT),'yyyy-MM-dd HH:mm:ss.SSS' )), 
	month(from_unixtime(cast(requestTimestamp/1000 as BIGINT),'yyyy-MM-dd HH:mm:ss.SSS' )), 
	substring(from_unixtime(cast(requestTimestamp/1000 as BIGINT), 'yyyy-MM-dd HH:mm:ss'),0,7),
	serverAddess ,webappOwnerTenant , webappName;
	
	
	
CREATE EXTERNAL TABLE IF NOT EXISTS WebappsSessionDurationStatsPerMinutes
	(serverAddess STRING, webappOwnerTenant STRING, webappName STRING, sessionDurarion FLOAT, maxDuration FLOAT, minDuration FLOAT, year SMALLINT,month SMALLINT,
	day SMALLINT,hour SMALLINT,minute SMALLINT, time STRING) STORED BY
	'org.wso2.carbon.hadoop.hive.jdbc.storage.JDBCStorageHandler' TBLPROPERTIES (
        'wso2.carbon.datasource.name'='WSO2BAM_DATASOURCE',
	'hive.jdbc.update.on.duplicate' = 'true',
	'hive.jdbc.primary.key.fields'='serverAddess,webappOwnerTenant,webappName,year,month,day,hour,minute',
	'hive.jdbc.table.create.query' = 'CREATE TABLE WEBAPP_SESSION_DURATION_STATS_SUMMARY_PER_MINUTE (serverAddess VARCHAR(100) NOT NULL, webappOwnerTenant VARCHAR(150), 
	webappName VARCHAR(150),  sessionDurarion DECIMAL(8,2), maxDuration DECIMAL(8,2), minDuration DECIMAL(8,2), year SMALLINT, month SMALLINT, day SMALLINT, 
	hour SMALLINT, minute SMALLINT, time VARCHAR(30), PRIMARY KEY(serverAddess,webappOwnerTenant,webappName,year,month,day,hour,minute))' );

insert overwrite table WebappsSessionDurationStatsPerMinutes  select t2.serverAddess, t2.webappOwnerTenant, t2.webappName, round(cast(avg(t2.duration)/1000 as BIGINT)/60,2) as avgDuration,
round(cast(max(t2.duration)/1000 as BIGINT)/60,2) as maxTime, round(cast(min(t2.duration)/1000 as BIGINT)/60,2) as minTime, t2.year, t2.month, t2.day, t2.hour, t2.minute,  t2.time from 
 	(select serverAddess ,webappOwnerTenant ,  webappName , sessionId, 
		year(from_unixtime(cast(min(requestTimestamp)/1000 as BIGINT),'yyyy-MM-dd HH:mm:ss.SSS' )) as year,
		month(from_unixtime(cast(min(requestTimestamp)/1000 as BIGINT),'yyyy-MM-dd HH:mm:ss.SSS' )) as month,
		day(from_unixtime(cast(min(requestTimestamp)/1000 as BIGINT),'yyyy-MM-dd HH:mm:ss.SSS' )) as day,
		hour(from_unixtime(cast(min(requestTimestamp)/1000 as BIGINT),'yyyy-MM-dd HH:mm:ss.SSS' )) as hour, 
		minute(from_unixtime(cast(min(requestTimestamp)/1000 as BIGINT),'yyyy-MM-dd HH:mm:ss.SSS' )) as minute,
		concat(substring(from_unixtime(cast(min(requestTimestamp)/1000 as BIGINT), 'yyyy-MM-dd HH:mm:ss'),0,16),':00') as time,
		(max(requestTimestamp) - min(requestTimestamp))  as duration 
		from WARD where sessionId !=""  
		group by  serverAddess ,webappOwnerTenant , webappName ,  sessionId) 
t2 group by t2.serverAddess, t2.webappOwnerTenant, t2.webappName, t2.year, t2.month, t2.day,  t2.hour,t2.minute, t2.time ;      


CREATE EXTERNAL TABLE IF NOT EXISTS WebappsSessionDurationStatsPerHour (serverAddess STRING, webappOwnerTenant STRING, webappName STRING, sessionDurarion FLOAT,
maxDuration FLOAT, minDuration FLOAT, year SMALLINT,month SMALLINT,day SMALLINT,hour SMALLINT, time STRING) 
STORED BY 'org.wso2.carbon.hadoop.hive.jdbc.storage.JDBCStorageHandler' TBLPROPERTIES ( 
'wso2.carbon.datasource.name'='WSO2BAM_DATASOURCE',
'hive.jdbc.update.on.duplicate' = 'true',
'hive.jdbc.primary.key.fields' = 'serverAddess,webappOwnerTenant,webappName,year,month,day,hour',
'hive.jdbc.table.create.query' = 'CREATE TABLE WEBAPP_SESSION_DURATION_STATS_SUMMARY_PER_HOUR ( serverAddess VARCHAR(100) NOT NULL, webappOwnerTenant VARCHAR(150),webappName VARCHAR(150),  
sessionDurarion DECIMAL(8,2), maxDuration DECIMAL(8,2), minDuration DECIMAL(8,2), year SMALLINT, month SMALLINT, day SMALLINT, hour SMALLINT, time VARCHAR(30),
PRIMARY KEY(serverAddess,webappOwnerTenant,webappName,year,month,day,hour))' );

insert overwrite table WebappsSessionDurationStatsPerHour  select t2.serverAddess, t2.webappOwnerTenant, t2.webappName, round(cast(avg(t2.duration)/1000 as BIGINT)/60,2) as avgDuration, 
round(cast(max(t2.duration)/1000 as BIGINT)/60,2) as maxTime, round(cast(min(t2.duration)/1000 as BIGINT)/60,2) as minTime, t2.year, t2.month, t2.day, t2.hour,  t2.time from 
 	(select serverAddess ,webappOwnerTenant ,  webappName , sessionId, 
		year(from_unixtime(cast(min(requestTimestamp)/1000 as BIGINT),'yyyy-MM-dd HH:mm:ss.SSS' )) as year,
		month(from_unixtime(cast(min(requestTimestamp)/1000 as BIGINT),'yyyy-MM-dd HH:mm:ss.SSS' )) as month,
		day(from_unixtime(cast(min(requestTimestamp)/1000 as BIGINT),'yyyy-MM-dd HH:mm:ss.SSS' )) as day,
		hour(from_unixtime(cast(min(requestTimestamp)/1000 as BIGINT),'yyyy-MM-dd HH:mm:ss.SSS' )) as hour, 
		concat(substring(from_unixtime(cast(min(requestTimestamp)/1000 as BIGINT), 'yyyy-MM-dd HH:mm:ss'),0,13),'') as time,
		(max(requestTimestamp) - min(requestTimestamp))  as duration 
		from WARD where sessionId !=""  
		group by  serverAddess ,webappOwnerTenant , webappName ,  sessionId) 
t2 group by t2.serverAddess, t2.webappOwnerTenant, t2.webappName, t2.year, t2.month, t2.day,  t2.hour, t2.time ;      


CREATE EXTERNAL TABLE IF NOT EXISTS WebappsSessionDurationStatsPerDay (serverAddess STRING, webappOwnerTenant STRING, webappName STRING, sessionDurarion FLOAT, 
maxDuration FLOAT, minDuration FLOAT, year SMALLINT,month SMALLINT,day SMALLINT,time STRING) 
STORED BY 'org.wso2.carbon.hadoop.hive.jdbc.storage.JDBCStorageHandler' TBLPROPERTIES ( 
'wso2.carbon.datasource.name'='WSO2BAM_DATASOURCE',
'hive.jdbc.update.on.duplicate' = 'true',
'hive.jdbc.primary.key.fields' = 'serverAddess,webappOwnerTenant,webappName,year,month,day',
'hive.jdbc.table.create.query' = 'CREATE TABLE WEBAPP_SESSION_DURATION_STATS_SUMMARY_PER_DAY ( serverAddess VARCHAR(100) NOT NULL, webappOwnerTenant VARCHAR(150),webappName VARCHAR(150), 
sessionDurarion DECIMAL(8,2), maxDuration DECIMAL(8,2), minDuration DECIMAL(8,2), year SMALLINT, month SMALLINT, day SMALLINT,time VARCHAR(30),PRIMARY KEY(serverAddess,webappOwnerTenant,webappName,year,month,day))' );

insert overwrite table WebappsSessionDurationStatsPerDay  select t2.serverAddess, t2.webappOwnerTenant, t2.webappName, round(cast(avg(t2.duration)/1000 as BIGINT)/60,2) as avgDuration, 
round(cast(max(t2.duration)/1000 as BIGINT)/60,2) as maxTime, round(cast(min(t2.duration)/1000 as BIGINT)/60,2) as minTime, t2.year, t2.month, t2.day,  t2.time from 
 	(select serverAddess ,webappOwnerTenant ,  webappName , sessionId, 
		year(from_unixtime(cast(min(requestTimestamp)/1000 as BIGINT),'yyyy-MM-dd HH:mm:ss.SSS' )) as year,
		month(from_unixtime(cast(min(requestTimestamp)/1000 as BIGINT),'yyyy-MM-dd HH:mm:ss.SSS' )) as month,
		day(from_unixtime(cast(min(requestTimestamp)/1000 as BIGINT),'yyyy-MM-dd HH:mm:ss.SSS' )) as day,
		concat(substring(from_unixtime(cast(min(requestTimestamp)/1000 as BIGINT), 'yyyy-MM-dd HH:mm:ss'),0,10),'') as time,
		(max(requestTimestamp) - min(requestTimestamp))  as duration 
		from WARD where sessionId !=""  
		group by  serverAddess ,webappOwnerTenant , webappName ,  sessionId) 
t2 group by t2.serverAddess, t2.webappOwnerTenant, t2.webappName, t2.year, t2.month, t2.day, t2.time ;      

CREATE EXTERNAL TABLE IF NOT EXISTS WebappsSessionDurationStatsPerMonth (serverAddess STRING, webappOwnerTenant STRING, webappName STRING, sessionDurarion FLOAT,  
maxDuration FLOAT, minDuration FLOAT, year SMALLINT,month SMALLINT, time STRING) 
STORED BY 'org.wso2.carbon.hadoop.hive.jdbc.storage.JDBCStorageHandler' TBLPROPERTIES ( 
'wso2.carbon.datasource.name'='WSO2BAM_DATASOURCE',
'hive.jdbc.update.on.duplicate' = 'true',
'hive.jdbc.primary.key.fields' = 'serverAddess,webappOwnerTenant,webappName,year,month',
'hive.jdbc.table.create.query' = 'CREATE TABLE WEBAPP_SESSION_DURATION_STATS_SUMMARY_PER_MONTH ( serverAddess VARCHAR(100) NOT NULL, webappOwnerTenant VARCHAR(150),webappName VARCHAR(150),  
sessionDurarion DECIMAL(8,2), maxDuration DECIMAL(8,2), minDuration DECIMAL(8,2), year SMALLINT, month SMALLINT,time VARCHAR(30),PRIMARY KEY(serverAddess,webappOwnerTenant,webappName,year,month))' );

insert overwrite table WebappsSessionDurationStatsPerMonth  select t2.serverAddess, t2.webappOwnerTenant, t2.webappName, round(cast(avg(t2.duration)/1000 as BIGINT)/60,2) as avgDuration,
round(cast(max(t2.duration)/1000 as BIGINT)/60,2) as maxTime, round(cast(min(t2.duration)/1000 as BIGINT)/60,2) as minTime, t2.year, t2.month,  t2.time from 
 	(select serverAddess ,webappOwnerTenant ,  webappName , sessionId, 
		year(from_unixtime(cast(min(requestTimestamp)/1000 as BIGINT),'yyyy-MM-dd HH:mm:ss.SSS' )) as year,
		month(from_unixtime(cast(min(requestTimestamp)/1000 as BIGINT),'yyyy-MM-dd HH:mm:ss.SSS' )) as month,
		concat(substring(from_unixtime(cast(min(requestTimestamp)/1000 as BIGINT), 'yyyy-MM-dd HH:mm:ss'),0,7),'') as time,
		(max(requestTimestamp) - min(requestTimestamp))  as duration 
		from WARD where sessionId !=""  
		group by  serverAddess ,webappOwnerTenant , webappName ,  sessionId) 
t2 group by t2.serverAddess, t2.webappOwnerTenant, t2.webappName, t2.year, t2.month, t2.time ;

CREATE EXTERNAL TABLE IF NOT EXISTS WebappsContextStatsPerMinutes
	(serverAddess STRING, webappOwnerTenant STRING, webappName STRING, webappContext STRING, contextCount BIGINT, year SMALLINT,month SMALLINT,
	day SMALLINT,hour SMALLINT,minute SMALLINT, time STRING) STORED BY
	'org.wso2.carbon.hadoop.hive.jdbc.storage.JDBCStorageHandler' TBLPROPERTIES (
        'wso2.carbon.datasource.name'='WSO2BAM_DATASOURCE',
	'hive.jdbc.update.on.duplicate' = 'true',
	'hive.jdbc.primary.key.fields'='serverAddess,webappOwnerTenant,webappName,webappContext,year,month,day,hour,minute',
	'hive.jdbc.table.create.query' = 'CREATE TABLE WEBAPP_CONTEXT_STATS_SUMMARY_PER_MINUTE (serverAddess VARCHAR(100) NOT NULL, webappOwnerTenant VARCHAR(150), 
	webappName VARCHAR(150),  webappContext VARCHAR(250), contextCount INT, year SMALLINT, month SMALLINT, day SMALLINT, hour SMALLINT, minute SMALLINT, time VARCHAR(30),
	PRIMARY KEY(serverAddess,webappOwnerTenant,webappName,webappContext,year,month,day,hour,minute))' );

insert overwrite table WebappsContextStatsPerMinutes select serverAddess ,webappOwnerTenant , webappName , webappContext, count(webappContext) as contextCount,
	year(from_unixtime(cast(requestTimestamp/1000 as BIGINT),'yyyy-MM-dd HH:mm:ss.SSS' )) as year,
	month(from_unixtime(cast(requestTimestamp/1000 as BIGINT),'yyyy-MM-dd HH:mm:ss.SSS' )) as month,
	day(from_unixtime(cast(requestTimestamp/1000 as BIGINT),'yyyy-MM-dd HH:mm:ss.SSS' )) as day,
	hour(from_unixtime(cast(requestTimestamp/1000 as BIGINT),'yyyy-MM-dd HH:mm:ss.SSS' )) as hour, 
	minute(from_unixtime(cast(requestTimestamp/1000 as BIGINT),'yyyy-MM-dd HH:mm:ss.SSS' )) as minute,
	concat(substring(from_unixtime(cast(requestTimestamp/1000 as BIGINT), 'yyyy-MM-dd HH:mm:ss'),0,16),':00') as time from WARD 
	where substr(webappContext,length(webappContext)-2) !='.js' and substr(webappContext,length(webappContext)-3) !='.css'
	group by year(from_unixtime(cast(requestTimestamp/1000 as BIGINT),'yyyy-MM-dd HH:mm:ss.SSS' )), 
	month(from_unixtime(cast(requestTimestamp/1000 as BIGINT),'yyyy-MM-dd HH:mm:ss.SSS' )), 
	day(from_unixtime(cast(requestTimestamp/1000 as BIGINT),'yyyy-MM-dd HH:mm:ss.SSS' )), 
	hour(from_unixtime(cast(requestTimestamp/1000 as BIGINT),'yyyy-MM-dd HH:mm:ss.SSS' )),
	minute(from_unixtime(cast(requestTimestamp/1000 as BIGINT),'yyyy-MM-dd HH:mm:ss.SSS' )),
	substring(from_unixtime(cast(requestTimestamp/1000 as BIGINT), 'yyyy-MM-dd HH:mm:ss'),0,16),
	serverAddess ,webappOwnerTenant , webappName, webappContext;
	
CREATE EXTERNAL TABLE IF NOT EXISTS WebappsContextStatsPerMinuteDataFetcher (serverAddess STRING, webappOwnerTenant STRING, webappName STRING, webappContext STRING, contextCount BIGINT, 
year SMALLINT,month SMALLINT,day SMALLINT,hour SMALLINT,minute SMALLINT,time STRING) 
STORED BY 'org.wso2.carbon.hadoop.hive.jdbc.storage.JDBCStorageHandler' TBLPROPERTIES ( 
'wso2.carbon.datasource.name'='WSO2BAM_DATASOURCE',
'mapred.jdbc.input.table.name' = 'WEBAPP_CONTEXT_STATS_SUMMARY_PER_MINUTE' );

CREATE EXTERNAL TABLE IF NOT EXISTS WebappsContextStatsPerHour (serverAddess STRING, webappOwnerTenant STRING, webappName STRING, webappContext STRING, contextCount BIGINT, 
year SMALLINT,month SMALLINT,day SMALLINT,hour SMALLINT, time STRING) 
STORED BY 'org.wso2.carbon.hadoop.hive.jdbc.storage.JDBCStorageHandler' TBLPROPERTIES ( 
'wso2.carbon.datasource.name'='WSO2BAM_DATASOURCE',
'hive.jdbc.update.on.duplicate' = 'true',
'hive.jdbc.primary.key.fields' = 'serverAddess,webappOwnerTenant,webappName,webappContext,year,month,day,hour',
'hive.jdbc.table.create.query' = 'CREATE TABLE WEBAPP_CONTEXT_STATS_SUMMARY_PER_HOUR ( serverAddess VARCHAR(100) NOT NULL, webappOwnerTenant VARCHAR(150),webappName VARCHAR(150),  
webappContext VARCHAR(250), contextCount INT, year SMALLINT, month SMALLINT, day SMALLINT, hour SMALLINT, time VARCHAR(30),
PRIMARY KEY(serverAddess,webappOwnerTenant,webappName,webappContext,year,month,day,hour))' );

insert overwrite table WebappsContextStatsPerHour select serverAddess,webappOwnerTenant,webappName,  webappContext, sum(contextCount) as contextCount, year, month, day,hour,concat(substr(time,0,13),':00:00') as time from WebappsContextStatsPerMinuteDataFetcher group by serverAddess,webappOwnerTenant,webappName, webappContext, year, month,day,hour,substr(time,0,13);


CREATE EXTERNAL TABLE IF NOT EXISTS WebappsContextStatsPerDayDataFetcher (serverAddess STRING, webappOwnerTenant STRING, webappName STRING, webappContext STRING, contextCount BIGINT,
year SMALLINT,month SMALLINT,day SMALLINT,hour SMALLINT, time STRING) 
STORED BY 'org.wso2.carbon.hadoop.hive.jdbc.storage.JDBCStorageHandler' TBLPROPERTIES ( 
'wso2.carbon.datasource.name'='WSO2BAM_DATASOURCE',
'mapred.jdbc.input.table.name' = 'WEBAPP_CONTEXT_STATS_SUMMARY_PER_HOUR'  );

CREATE EXTERNAL TABLE IF NOT EXISTS WebappsContextStatsPerDay (serverAddess STRING, webappOwnerTenant STRING, webappName STRING, webappContext STRING, contextCount BIGINT,
year SMALLINT,month SMALLINT,day SMALLINT,time STRING) 
STORED BY 'org.wso2.carbon.hadoop.hive.jdbc.storage.JDBCStorageHandler' TBLPROPERTIES ( 
'wso2.carbon.datasource.name'='WSO2BAM_DATASOURCE',
'hive.jdbc.update.on.duplicate' = 'true',
'hive.jdbc.primary.key.fields' = 'serverAddess,webappOwnerTenant,webappName,webappContext,year,month,day',
'hive.jdbc.table.create.query' = 'CREATE TABLE WEBAPP_CONTEXT_STATS_SUMMARY_PER_DAY ( serverAddess VARCHAR(100) NOT NULL, webappOwnerTenant VARCHAR(150),webappName VARCHAR(150), 
webappContext VARCHAR(250), contextCount INT, year SMALLINT, month SMALLINT, day SMALLINT,time VARCHAR(30),
PRIMARY KEY(serverAddess,webappOwnerTenant,webappName,webappContext,year,month,day))' );

insert overwrite table WebappsContextStatsPerDay select serverAddess,webappOwnerTenant,webappName, webappContext, sum(contextCount) as contextCount, year, month, day,substr(time,0,10) as time from WebappsContextStatsPerDayDataFetcher group by serverAddess,webappOwnerTenant,webappName,webappContext,year, month,day,substr(time,0,10);

CREATE EXTERNAL TABLE IF NOT EXISTS WebappsContextStatsPerMonth (serverAddess STRING, webappOwnerTenant STRING, webappName STRING, webappContext STRING, contextCount BIGINT,  year SMALLINT,month SMALLINT, time STRING) 
STORED BY 'org.wso2.carbon.hadoop.hive.jdbc.storage.JDBCStorageHandler' TBLPROPERTIES ( 
'wso2.carbon.datasource.name'='WSO2BAM_DATASOURCE',
'hive.jdbc.update.on.duplicate' = 'true',
'hive.jdbc.primary.key.fields' = 'serverAddess,webappOwnerTenant,webappName,webappContext,year,month',
'hive.jdbc.table.create.query' = 'CREATE TABLE WEBAPP_CONTEXT_STATS_SUMMARY_PER_MONTH ( serverAddess VARCHAR(100) NOT NULL, webappOwnerTenant VARCHAR(150),webappName VARCHAR(150),  
webappContext VARCHAR(250), contextCount INT, year SMALLINT, month SMALLINT,time VARCHAR(30),
PRIMARY KEY(serverAddess,webappOwnerTenant,webappName,webappContext,year,month))' );

insert overwrite table WebappsContextStatsPerMonth select serverAddess,webappOwnerTenant,webappName, webappContext, sum(contextCount) as contextCount, year, month,substr(time,0,7) as time from WebappsContextStatsPerDayDataFetcher group by serverAddess,webappOwnerTenant,webappName,webappContext, year, month,substr(time,0,7);

                                    
