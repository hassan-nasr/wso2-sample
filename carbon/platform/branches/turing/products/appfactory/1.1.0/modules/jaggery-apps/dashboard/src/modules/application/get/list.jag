<%
include("/jagg/jagg.jag");
include("/jagg/constants.jag");
include("/jagg/config_reader.jag");

var log = new Log();
var modManager = jagg.module("manager");

var getVersionsInLifecycleStages = function () {
	var ws = require("ws");
    var applicationMgtService = new ws.WSRequest();
    var options = new Array();
    options.useSOAP = 1.2;
    options.action = "urn:getVersionsInStages";
    options["HTTPHeaders"] = [
        { name : "Cookie", value :modManager.getAdminCookie() }
    ];
    var payload = '<p:getVersionsInStages xmlns:p="http://service.mgt.dashboard.appfactory.carbon.wso2.org"></p:getVersionsInStages>';
    var result;

    try {
        var endPoint = getProperty(APPFACTORY_SERVER_URL) + "DashboardManagementService";
        applicationMgtService.open(options, endPoint, false);
        applicationMgtService.send(payload);
        result = applicationMgtService.responseE4X;
        var ns = new Namespace("http://service.mgt.dashboard.appfactory.carbon.wso2.org");
        var ax213 = new Namespace("http://dto.core.appfactory.carbon.wso2.org/xsd");
        result = result.ns::["return"];
		
		var elementsArray = new Array();
       
        var index = 0;
        for (var version in result) {
        	var versionInfo = result[version]; 
        	var id  = versionInfo.ax213::["id"].text();
        	var lifecycleStage = versionInfo.ax213::["lifecycleStage"].text();

        	var innerElement = {};
        	innerElement.id = '' + id;
        	innerElement.lifecycleStage = '' + lifecycleStage;
        	
			elementsArray.push(innerElement);
        }
        
        var response = {};
        var contentArray = new Array();

        var allStages = getAllStages();
        allStages = parse(allStages);

        for(var i=0; i<allStages.length; i++) {
        	var stage = allStages[i];
        	var versionCounter = 0;
        	
        	for (var j=0; j<elementsArray.length; j++) {
        		var version = elementsArray[j];
        		if(version.lifecycleStage == stage) {
        			versionCounter++;
        		}
        	}
        	
        	var innerElement = new Array();
        	innerElement.push(stage);
        	innerElement.push(versionCounter);

			contentArray.push(innerElement);
        }

        return contentArray;
    } catch (e) {
        log.error("Error while getting all applications \n" + e.message);
        throw "Error while getting all applications";
    }
}

var getAllStages = function() {
    var stages = getProperties('ApplicationDeployment.DeploymentStage');
	if(stages == null) {
		return null;
	}

	var stageArray = new Array();
	
	var counter = 0;
	while(stages[counter] != null) {
		stageArray[counter] = stages[counter];
		counter++;
	}
	
	return stringify(stageArray);
};

var getAllCreatedApplications = function () {
	var ws = require("ws");
    var applicationMgtService = new ws.WSRequest();
    var options = new Array();
    options.useSOAP = 1.2;
    options.action = "urn:getAllCreatedApplications";
    options["HTTPHeaders"] = [
        { name : "Cookie", value :modManager.getAdminCookie() }
    ];
    var payload = '<p:getAllCreatedApplications xmlns:p="http://service.mgt.application.appfactory.carbon.wso2.org"></p:getAllCreatedApplications>';
    var result;

    try {
        var endPoint = getProperty(APPFACTORY_SERVER_URL) + "ApplicationManagementService";
        applicationMgtService.open(options, endPoint, false);
        applicationMgtService.send(payload);
        result = applicationMgtService.responseE4X;
        result = result.*::["return"];
		
		var elementsArray = new Array();
        
        for (var applicationKey in result) {
        	elementsArray.push(result[applicationKey]);	
        }
		
        return elementsArray;
    } catch (e) {
        throw "Error while getting all applications";
    }
}

var getTopAppOwners = function () {
	var ws = require("ws");
    var applicationMgtService = new ws.WSRequest();
    var options = new Array();
    options.useSOAP = 1.2;
    options.action = "urn:getUserCountPerRoleAcrossAllApps";
    options["HTTPHeaders"] = [
        { name : "Cookie", value :modManager.getAdminCookie() }
    ];
    var payload = '<p:getUserCountPerRoleAcrossAllApps xmlns:p="http://service.mgt.dashboard.appfactory.carbon.wso2.org"><p:roleName>appOwner</p:roleName></p:getUserCountPerRoleAcrossAllApps>';
          
    var result;

    try {
        var endPoint = getProperty(APPFACTORY_SERVER_URL) + "DashboardManagementService";
        applicationMgtService.open(options, endPoint, false);
        applicationMgtService.send(payload);
        result = applicationMgtService.responseE4X;
        result = result.*::["return"];
		
		var elementsArray = new Array();
		var finalArray = new Array();
        var ax29 = new Namespace("http://service.mgt.application.appfactory.carbon.wso2.org/xsd");
        var ax211= new Namespace("http://service.mgt.dashboard.appfactory.carbon.wso2.org/xsd");
        
        for (var index in result) {
        	var userInfo = result[index]; 	
        	
        	var userCount = userInfo.ax211::["count"].text();
			var userInfoBean = userInfo.ax211::["userInfoBean"];
			var firstName = userInfoBean.ax29::["firstName"];
			var lastName = userInfoBean.ax29::["lastName"];
			var fullName  = firstName + " " + lastName;
			
        	var innerElement = {};
        	innerElement.fullName = '' + fullName;
        	innerElement.userCount = '' + userCount;
        	
			elementsArray.push(innerElement);
        }
        
        elementsArray = elementsArray.sort(compare);  
        
        var otherCounter = 0;
        for (var index in elementsArray) {
        	var userInfo = elementsArray[index]; 
        	
        	if(index >= 10) {
        		otherCounter = otherCounter + parseInt(userInfo.userCount);
        	}else {
        		var innerElement = new Array();
        		innerElement.push(userInfo.fullName);
        		innerElement.push(parseInt(userInfo.userCount));
        	
        		finalArray.push(innerElement);
        	}
        } 
        
        if(otherCounter != 0) {
        	var innerElement = new Array();
        	innerElement.push('Other');
        	innerElement.push(parseInt(otherCounter));
        	
        	finalArray.push(innerElement);
        }
		
        return finalArray;
    } catch (e) {
        throw "Error while getting top application owners";
    }
}

function compare(a,b) {
	if (a.userCount < b.userCount) {
    	return -1;
    } else if (a.userCount > b.userCount) {
    	return 1;
    }
    
  	return 0;
}

%>
