<%
include("/jagg/jagg.jag");
include("/jagg/constants.jag");
include("/jagg/config_reader.jag");
var log = new Log();
(function () {
    var mod, obj, result,

    site = require("/site/conf/site.json");
    action = request.getParameter("action");
 	
    if (action === "isDevOp") {
        mod = jagg.module("application");
        var appKey=request.getParameter("applicationKey");
        var userName = request.getParameter("userName");
        try {
     	  var users = parse(mod.getAppUsersWithRoles(appKey));
      	  for (var index in users) {
            	var entry = users[index];
            	var roles = entry.roles;
               	if(entry.userName == userName && roles.indexOf("devOps") !== -1){
 	            	print(true);
 	            	return;
               	}
           }
        } catch(e) {
            throw "Error while checking the logged in user for devOps role of the appKey "+ appKey;
        }
        print(false);
    }else if (action === "getAppOwner") {
       mod = jagg.module("application");
       var appKey=request.getParameter("applicationKey");
       try {
    	  var users = parse(mod.getAppUsersWithRoles(appKey));
     	  for (var index in users) {
           	var entry = users[index];
           	var roles = entry.roles;
              	if(roles.indexOf("appOwner") !== -1){
	            	print(entry.userName);
	            	return;
              	}
          }
       } catch(e) {
           throw "Error while retrieving the appOwner of the appKey "+ appKey;
       }
   }else if (action === "getAppUsersWithRoles") {
         mod = jagg.module("application");
        var appKey=request.getParameter("applicationKey");
        try {
            print(mod.getAppUsersWithRoles(appKey));
        } catch(e) {
            throw "Error while retrieving users of application";
        }
    }else if (action === "getAppUsersByRoles") {
         mod = jagg.module("application");
        var appKey=request.getParameter("applicationKey");
        try {
            print(mod.getAppUsersByRoles(appKey));
        } catch(e) {
            throw "Error while retrieving users of application";
        }
    }else if (action === "getUserInfo") {
        var appliKey=request.getParameter("applicationKey");
        try {
            result = getUsersInfoOfApplication(appliKey);
            if( result !== null) {
                return result;
            } else {
                throw "Error while retrieving user infomation";
            }
        } catch(e) {
        throw "Error while retrieving users infomation";
        }
    }else if(action === 'getUserConfirmationObject') {
    	mod = jagg.module("user");
    	var confirmation = request.getParameter("confirmation");
    	
    	try {
            return mod.getUserConfirmationObject(confirmation);
        } catch(e) {
            throw "Error while getting application of user";
        }
    }else if(action === 'getRepositoryPath') {
    	var applicationKey = request.getParameter("applicationKey");
    	
    	var path = APPLICATIONS + applicationKey;
        if(resourceExists(path)) {
            return getResource(path).getProperty(APPLICATION_REPO_LINK);
        }
    }else if(action === 'getUserAccess') {
    	mod = jagg.module("application");
    	
    	var applicationKey = request.getParameter("applicationKey");
    	var userName = request.getParameter("userName");
    	
    	mod.getUserAccess(applicationKey, userName);
    }else if(action === "validateUser") {
    	mod = jagg.module("user");
    	var userName = request.getParameter("userName");
    	var result = false;

    	try {
            result = mod.validateUser(userName);
        } catch(e) {
            throw "Error while validating the user email address" +e ;
        }

        print(result);
    }
    else if(action==="getAllUsersHavingName"){
    	mod = jagg.module("user");
    	var userName = request.getParameter("userName");
    	var result = false ;
    	try {
    		result = mod.getAllUsersHavingName(userName);
    	} catch(e) {
    		throw "Error while searching the users";
    	}
    	print(result);
    }    
    else {

    	throw new Error("No action specified");
    }
}());
%>