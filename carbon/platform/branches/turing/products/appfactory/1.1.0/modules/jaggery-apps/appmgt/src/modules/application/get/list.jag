<%
    include("/jagg/jagg.jag");
    include("/jagg/constants.jag");
    include("/jagg/config_reader.jag");

// used for logging
    var log = new Log();
    var modManager = jagg.module("manager");
    var modResource = jagg.module("resource");
    var modApplication = jagg.module("application");
    var carbon = require('carbon');
    var server = carbon.server;
    var appfactory = require('appFactory');
    var multitenancy = carbon.multitenancy;

   

    var VersionComparator = function(a, b)
    {
        return b.version.localeCompare(a.version);
    };


    var loadConfigValueFromCarbon = function(configElem)
    {
    	return server.osgiService('org.wso2.carbon.base.api.ServerConfigurationService').getFirstProperty(configElem);

    };
    
    var checkSystemStatus = function(applicationSystemId)
    {
        var ws = require("ws");
        var userAdmin = new ws.WSRequest();
        var options = new Array();

        options.useSOAP = 1.1;
        options.action = "urn:checkSystemStatus";
        options["HTTPHeaders"] =[{
        	name:
        		"Cookie", value:modManager.getAdminCookie(getProperty(APPFACTORY_SERVER_URL))
        }];
        var payload = '<ser:checkSystemStatus xmlns:ser="http://service.mgt.application.appfactory.carbon.wso2.org"><ser:applicationSystemId>'
                + applicationSystemId + '</ser:applicationSystemId></ser:checkSystemStatus>';
        var result;

        try {
        	var endPoint = getProperty(APPFACTORY_SERVER_URL) + "ApplicationManagementService";
        	userAdmin.open(options,endPoint, false);
        	userAdmin.send(payload);
        	result = userAdmin.responseE4X;
        	result = result. *::["return"].text();
        } catch (e) {
        	log.error("Error while retrieving the " + applicationSystemId + "system status \n" + e.message);
        	throw "Error while retrieving the " + applicationSystemId + "system status ";
        }
        return result;
    }
    ;

//checked - private method 
    var getAllApps = function(userName)
    {
         jagg.module("permission").checkUserAuthenticated();
         return server.osgiService('org.wso2.carbon.appfactory.application.mgt.service.ApplicationManagementService').getAllApplications();
    }
    ;
    
    var getAllAppsCountOfUser = function(userName)
    {
         jagg.module("permission").checkUserAuthenticated();
       
         // this security check is needed in case of user trying to retrieve all apps of other users.
         if (userName != jagg.getUser()) {
             var message = jagg.getUser() + ' is trying to list applications of user:' + userName;
             log.error(message);
             throw message;
         }
         try {
             var result = getAllApps(userName);
             var ns = new Namespace("http://service.mgt.application.appfactory.carbon.wso2.org");
             var elements = result.ns::["return"].text();
             return elements.length();
         } catch (e) {
             throw "Error while getting all application count of user: "+ userName;
         }
    }
    ;

//checked
    var getAllAppsOfUser = function(userName)
    {
         jagg.module("permission").checkUserAuthenticated();
         try {
             var result,tenantDomain=modManager.getTenantDomain() ;
             var context=multitenancy.getPrivilegedCarbonContext();
             var tenantManager= multitenancy.getTenantManager();
        try{
             context.startTenantFlow();
             context.getCurrentContext().setTenantId(tenantManager.getTenantId(tenantDomain));
             context.getCurrentContext().setTenantDomain(tenantDomain);
             result=getAllApps();
        }finally{

             context.endTenantFlow();
        }
            log.info("Apps from backend "+result);
             var elementsArray = new Array();
             for (var applicationKey in
            result){
                 var appInfo = getAppInfo(result[applicationKey]);
                 if (appInfo != null) {
                     elementsArray.push(appInfo);
                 }
             }
             return stringify(elementsArray);
         } catch (e) {
             throw "Error while getting application of user" + e;
         }
  }
    ;

//checked
    var getAppInfo = function(resourceContent)
    {
                var application = {};
                application.key = resourceContent.id;
                application.name = resourceContent.name;
                application.description = resourceContent.description;
                application.type = resourceContent.type;
                application.typeDisplayName = getProperty("ApplicationType." + application.type + ".Property.DisplayName");
               
                application.repositoryType = resourceContent.repositorytype;
               
                application.repositoryTypeDisplayName = getProperty("RepositoryProviderConfig."+ application.repositoryType + ".Property.DisplayName");
                
                return application;

 
    }
    ;

// This funciton get application rxt from registry and populate application object.
// This is not secured as this is calling from getAllApp method. Any caller of this
// function need to secure acess. Permission check is removed do reduce the tenant loading.
    var getAppInfoWithoutUserRoles = function(applicationKey)
    {
        var path = APPLICATIONS + applicationKey + APP_INFO;
        if (modResource.resourceExists(path)) {
            var resource = modResource.getResource(path);
            var resourceContent = resource.content;

            if (resourceContent. *::application. *::key.text() != undefined){
                var application = {};
                application.key = resourceContent. *::application. *::key.text();
                application.name = resourceContent. *::application. *::name.text();
                application.description = resourceContent. *::application. *::description.text();
                application.type = resourceContent. *::application. *::type.text();
                application.repositoryType = resourceContent. *::application. *::repository. *::type.text();
                return application;
            }
        }
        return null;
    }
    ;

//checked
    var getAllAppVersionsInStage = function(stageName, userName)
    {
        var visibilityPermissionToStage = PERMISSION_VISIBILITY_STAGE + stageName;

        var allAppVersionArray = new Array();
        var applicationList = getAllAppsOfUser(userName);
        var parsedArray = parse(applicationList);

        for (var i = 0; i < parsedArray.length; i++) {
            var application = parsedArray[i];
            var applicationKey = application.key;
            if (jagg.module("permission").isUserAccessGranted(applicationKey, visibilityPermissionToStage)) {
                var appVersions = getAppVersionsInStage(stageName, applicationKey, userName);
                if (appVersions != null) {
                    allAppVersionArray = allAppVersionArray.concat(appVersions);
                }
            }
        }

        return stringify(allAppVersionArray);
    }
    ;


    var getDeployedBuildId = function(applicationKey, version, stage)
    {
    	return 1;    	
    }
    ;


	var getArtifactInformation = function (applicationKey,stageName) {
	
	//jagg.module("permission").checkUserActionPermission(applicationKey,PERMISSION_VISIBILITY_STAGE + stageName);

        var ws = require("ws");
        var artifactiInfoService = new ws.WSRequest();
        var options = new Array();
        options.useSOAP = 1.2;
        options.action = "urn:getArtifactInformation";
        options["HTTPHeaders"] =[
                                 {
                                	 name:
                                		 "Cookie", value:modManager.getAdminCookie(getProperty(APPFACTORY_SERVER_URL))
                                 }
                                 ];
        var payload = '<dep:getArtifactInformation  xmlns:dep="http://deploy.core.appfactory.carbon.wso2.org"><dep:applicationId>' + applicationKey + '</dep:applicationId></dep:getArtifactInformation>';
        var result;
        var artifactsMap = {};
        var ns;
        var ax223;
        if (log.isDebugEnabled()) {
            log.debug("Payload: " + payload);
        }


        try {
        	var endPoint = getProperty(APPFACTORY_SERVER_URL) + "ApplicationDeployer";
        	artifactiInfoService.open(options,endPoint, false);
        	artifactiInfoService.send(payload);
        	result = artifactiInfoService.responseE4X;
        	ns = new Namespace("http://deploy.core.appfactory.carbon.wso2.org");
        	ax223 = new Namespace("http://deploy.core.appfactory.carbon.wso2.org/xsd");
        } catch (e) {
        	log.error("Error occured while fetching artifact information \n" + e.message);
        	throw "Error while getting artifact information";
        }

        try {
            var response = result.ns::["return"];
            for (var index in
            response){
                var responseArtifact = response[index];
                var version = responseArtifact.ax223::["version"].text();
                var artifact = {};
                artifact.autoBuild = responseArtifact.ax223::["autoBuild"].text();
                artifact.autoDeploy = responseArtifact.ax223::["autoDeploy"].text();
                artifact.lastBuildStatus = responseArtifact.ax223::["lastBuildStatus"].text();
                artifact.lastDeployedId = responseArtifact.ax223::["lastDeployedId"].text();
                artifact.applicationKey = responseArtifact.ax223::["applicationKey"].text();

                artifactsMap[version] = artifact;
            }
            return artifactsMap;
        } catch (e) {
            log.error("Error occured while processing information returned from urn:getDeployedArtifactInformation ");
            throw "Error occured while processing information returned from urn:getDeployedArtifactInformation ";
        }

    }
    ;

//Read the application build status 
    var getLatestBuildSuccessInfo = function(applicationKey, version, stageName)
    {
        var applicatoinPath = APPLICATIONS + applicationKey;
        var path = applicatoinPath + "/" + stageName + "/" + version + "/appversion";
        var ret = {};
        ret.buildinfo = getLastBuildStatus(path);
        return ret;
    }
    ;

    var getAppVersionsInStage = function(stageName, applicationKey, userName, metaDataNeed, buildable, isRoleBasedPermissionAllowed)
    {
        jagg.module("permission").checkUserActionPermission(applicationKey, PERMISSION_APPLICATION_MEMBER);

        //   jagg.module("permission").checkAdminPermission();
        if (isRoleBasedPermissionAllowed == "true") {
            var hasPermissiontToStage = jagg.module("permission").hasPermissionToStage(applicationKey, stageName);
            if (!hasPermissiontToStage) {
                return null;
            }
        }
        var applicatoinPath = APPLICATIONS + applicationKey;
        var artifacts =server.osgiService('org.wso2.carbon.appfactory.application.mgt.service.ApplicationManagementService').getAllVersionsOfApplication(applicationKey);
        var artifactsInStage = new Array();
        var artifactsInStageCount = 0;
        if (artifacts != undefined && artifacts.length > 0) {
            for(index in artifacts) {
                var element = artifacts[index];
                if(element['stage'] == stageName) {
                    artifactsInStage[artifactsInStageCount] = element;
                    artifactsInStageCount++;
                }
            }
        }
        var versions = getVersionInfo(applicationKey, artifactsInStage);
        if(versions !=null) {
            return stringify(versions);
        } else {
            return null;
        }
    }
    ;

    var getBranchInfo= function(applicationKey){
            var result,tenantDomain=modManager.getTenantDomain();
            var context=multitenancy.getPrivilegedCarbonContext();
            var tenantManager= multitenancy.getTenantManager();
               try{
                     context.startTenantFlow();
                     context.getCurrentContext().setTenantId(tenantManager.getTenantId(tenantDomain));
                     context.getCurrentContext().setTenantDomain(tenantDomain);
                     result=server.osgiService('org.wso2.carbon.appfactory.application.mgt.service.ApplicationManagementService').getBasicApplicationInfo(applicationKey);
                  }finally{
                    context.endTenantFlow();
                  }
            return result;
    }
    
    var getApplicationManagementService=function(){
        var carbon = require('carbon');
        return carbon.server.osgiService('org.wso2.carbon.appfactory.application.mgt.service.ApplicationManagementService');
    }

    
    var getMetaDataForCarAppState = function(applicationKey, version, stage)
    {
        jagg.module("permission").checkUserActionPermission(applicationKey, PERMISSION_APPLICATION_MEMBER);
        var metaDataResult = {};


        var stageURL = getProperty("ApplicationDeployment.DeploymentStage." + stage + ".DeploymentServerURL");
        var appBaseURL = getProperty("ApplicationDeployment.DeploymentStage." + stage + ".BaseAccessUrl");

        var ws = require("ws");
        var repoMgtService = new ws.WSRequest();
        var options = new Array();
        options.useSOAP = 1.2;
        var payload = "";

        options.action = "urn:getAppData";
        payload = '<xsd:getAppData xmlns:xsd="http://mgt.application.carbon.wso2.org"><xsd:appName>CApp-' + applicationKey + '</xsd:appName></xsd:getAppData>';

        var endPoint = stageURL + "ApplicationAdmin";

        var ns = new Namespace("http://mgt.application.carbon.wso2.org");
        var ax2413 = new Namespace("http://mgt.application.carbon.wso2.org/xsd");
        try {
        	repoMgtService.open(options,endPoint, false, getProperty(ADMIN_USERNAME) + '@' + applicationKey, getProperty(ADMIN_PASSWORD));
        	repoMgtService.send(payload);
        } catch (e) {
        	metaDataResult.accessURLMD = "";
        	metaDataResult.baseURLMD = "";
        	metaDataResult.appStatusMD = "faulty";
        	log.error("Get MetaData from " + stage + " Server. Server Problem : " + e.toString());
        	return metaDataResult;
        }
        result = repoMgtService.responseE4X;
        var elements = result.ns::["return"];

        for (var buildData in
        elements){
        var buildInfo = elements[buildData];
        var serviceGroups = buildInfo.ax2413::["serviceGroups"];
        var urls = new Array();
        for (var service in
        serviceGroups){
            urls[urls.length] = serviceGroups[service].ax2413::["services"].text();
        }
        metaDataResult.accessURLMD = urls;
        metaDataResult.baseURLMD = appBaseURL;
        metaDataResult.appStatusMD = "started";

    }
        return metaDataResult;

    }
    ;

    var getMetaDataForWarAppState = function(applicationKey, version, stage, state, type)
    {
        jagg.module("permission").checkUserActionPermission(applicationKey, PERMISSION_APPLICATION_MEMBER);

        var metaDataResult = {};

        var stageURL = getProperty("ApplicationDeployment.DeploymentStage." + stage + ".DeploymentServerURL");
        var appBaseURL = getProperty("ApplicationDeployment.DeploymentStage." + stage + ".BaseAccessUrl");
        var fileName;

        if (type == 'jaggery') {
            fileName = applicationKey + '-' + version;
            if (version == 'trunk') {
                fileName = applicationKey + '-SNAPSHOT';
            }
        } else {
            fileName = applicationKey + '-' + version + '.war';
            if (version == 'trunk') {
                fileName = applicationKey + '-SNAPSHOT.war';
            }
        }

        var ws = require("ws");
        var repoMgtService = new ws.WSRequest();
        var options = new Array();
        options.useSOAP = 1.2;

        var payload = "";

        if (state == "started") {
            options.action = "urn:getStartedWebapp";
            payload = '<xsd:getStartedWebapp xmlns:xsd="http://org.apache.axis2/xsd"><xsd:webappFileName>' + fileName + '</xsd:webappFileName></xsd:getStartedWebapp>';
        } else if (state == "stopped") {
            options.action = "urn:getStoppedWebapp";
            payload = '<xsd:getStoppedWebapp xmlns:xsd="http://org.apache.axis2/xsd"><xsd:webappFileName>' + fileName + '</xsd:webappFileName></xsd:getStoppedWebapp>';
        } else if (state == "faulty") {
            options.action = "urn:getPagedFaultyWebappsSummary";
            payload = '<xsd:getPagedFaultyWebappsSummary xmlns:xsd="http://org.apache.axis2/xsd"><xsd:webappSearchString>' + fileName + '</xsd:webappSearchString><xsd:webappType>war</xsd:webappType><xsd:pageNumber>1000</xsd:pageNumber></xsd:getPagedFaultyWebappsSummary>';
        }

        var endPoint = stageURL + "WebappAdmin";

        var ns = new Namespace("http://org.apache.axis2/xsd");
        var ax2413 = new Namespace("http://mgt.webapp.carbon.wso2.org/xsd");
        try {
        	repoMgtService.open(options,endPoint, false, getProperty(ADMIN_USERNAME) + '@' + applicationKey, getProperty(ADMIN_PASSWORD));
        	repoMgtService.send(payload);
        } catch (e) {
        	metaDataResult.accessURLMD = "";
        	metaDataResult.baseURLMD = "";
        	metaDataResult.appStatusMD = "serverfaulty";
        	log.error("Get MetaData from " + stage + " Server. Server Problem");
        	return metaDataResult;
        }
        result = repoMgtService.responseE4X;


        var elements = result.ns::["return"];

        if (state == "started") {

            for (var buildData in
            elements){
                var buildInfo = elements[buildData];
                var appContext = buildInfo.ax2413::["context"].text();
                if (escape(appContext) == '') {
                    return getMetaDataForWarAppState(applicationKey, version, stage, "stopped", type);
                }
                log.info("Get MetaData from " + stage + " Server. WebContext for " + applicationKey + "[" + version + "] is '" + appContext + "'. ");

                var servletContext = buildInfo.ax2413::["servletContext"].text();

                metaDataResult.accessURLMD = escape(appContext) + escape(servletContext);
                metaDataResult.baseURLMD = appBaseURL;
                metaDataResult.appStatusMD = "started";
                break;
            }

        } else if (state == "stopped") {
            for (var buildData in elements){
                var buildInfo = elements[buildData];
                var appContext = buildInfo.ax2413::["context"].text();
                if (escape(appContext) == '') {
                    return getMetaDataForWarAppState(applicationKey, version, stage, "faulty", type);
                }
                log.info("Get MetaData from " + stage + " Server. WebContext for " + applicationKey + "[" + version + "] is '" + appContext + "'. ");

                var servletContext = buildInfo.ax2413::["servletContext"].text();

                metaDataResult.accessURLMD = escape(appContext) + escape(servletContext);
                metaDataResult.baseURLMD = appBaseURL;
                metaDataResult.appStatusMD = "stopped";
                break;
            }
        } else if (state == "faulty") {
            for (var buildData in
            elements){
                var buildInfo = elements[buildData];
                var webAppRoot = buildInfo.ax2413::["webapps"];
                var appContext = webAppRoot.ax2413::["context"].text();

                metaDataResult.accessURLMD = "";
                metaDataResult.baseURLMD = "";
                if (escape(appContext) != '') {
                    log.error("Get MetaData from " + stage + " Server. Application is faulty.");
                    metaDataResult.appStatusMD = "faulty";
                } else {
                    log.error("Get MetaData from " + stage + " Server. Application is Not Deployed Yet.");
                    metaDataResult.appStatusMD = "unknown";
                }
                break;
            }
        }

        return metaDataResult;

    }
    ;


    var getMetaDataForApplicationState = function(applicationKey, version, stage, state, type, internal)
    {
        jagg.module("permission").checkUserActionPermission(applicationKey, PERMISSION_APPLICATION_MEMBER);
        var metaDataResult = {};
        if (type == undefined || type == null || type == '') {
            var applicationInfo = getAppInfo(applicationKey);
            type = applicationInfo.type;
        }

        if (type == "car") {
            metaDataResult = getMetaDataForCarAppState(applicationKey, version, stage);
        } else if (type == 'bpel' || type == 'dbs') {
            metaDataResult = getMetaDataForServiceState(applicationKey, version, stage, state, type);
        } else {
            metaDataResult = getMetaDataForWarAppState(applicationKey, version, stage, state, type);
        }
        metaDataResult.type = type;
        return metaDataResult;
    }
    ;


    var listAppsWithDetails = function()
    {
        // not secured as getAppInfo method is secured.
        var applicationKeyArray = jagg.require(jagg.getModulesDir() + "dashboard/get/list.jag").getAllApplications.apply(this, arguments);
        var applicationsArray = new Array();
        for (var _index = 0; _index < applicationKeyArray.length; _index++) {
            var _application = getAppInfo(applicationKeyArray[_index]);
            applicationsArray[_index] = _application;
        }
        return applicationsArray;
    }
    ;

    var getArtifactDetails = function(appversionPath)
    {
        jagg.module("permission").checkUserAuthenticated();
        var path = appversionPath;
        if (modResource.resourceExists(path)) {
            var resource = modResource.getResource(path);
            var resourceContent = resource.content;
            if (resourceContent. *::appversion. *::artifactDetails.text() != undefined){
                return resourceContent. *::appversion. *::artifactDetails.text();
            }
        }
        return null;
    }
    ;

    var getLastBuildStatus = function(appversionPath)
    {
        jagg.module("permission").checkUserAuthenticated();
        var path = appversionPath;
        if (modResource.resourceExists(path)) {
            var resource = modResource.getResource(path);
            var resourceContent = resource.content;
            if (resourceContent. *::appversion. *::LastBuildStatus.text() != undefined){
                return resourceContent. *::appversion. *::LastBuildStatus.text();
            }
        }
        return null;
    }
    ;

    var getAutoDeploymentStatus = function(appversionPath)
    {
        jagg.module("permission").checkUserAuthenticated();
        var path = appversionPath;
        if (modResource.resourceExists(path)) {
            var resource = modResource.getResource(path);
            var resourceContent = resource.content;
            if (resourceContent. *::appversion. *::autodeployment.text() != undefined){

                return resourceContent. *::appversion. *::autodeployment.text();
            }
        }
        return null;
    }
    ;

//chekced
    var getAllStages = function()
    {
        jagg.module("permission").checkUserAuthenticated();
        var stages = getProperties('ApplicationDeployment.DeploymentStage');
        if (stages == null) {
            return null;
        }

        var stageArray = new Array();

        var counter = 0;
        while (stages[counter] != null) {
            stageArray[counter] = stages[counter];
            counter++;
        }

        return stringify(stageArray);
    }
    ;

//chekced
    var getBuildableStages = function()
    {
        jagg.module("permission").checkUserAuthenticated();
        var stages = getProperties('ApplicationDeployment.DeploymentStage');
        if (stages == null) {
            return null;
        }

        var stageArray = new Array();

        var counter = 0;
        try {
            while (stages[counter] != null) {
                if (getProperty('ApplicationDeployment.DeploymentStage.' + stages[counter] + '.Buildable') == "true") {
                    stageArray[stageArray.length] = stages[counter];
                }
                counter++;
            }
        } catch (e) {
            log.error("Error while getting Buildable stages from appfactory.xml \n" + e.message);
            throw "Error while getting Buildable stages";
        }

        return stringify(stageArray);
    }
    ;

//chekced
    var getAllAppVersionsInStages = function(userName)
    {
        jagg.module("permission").checkUserAuthenticated();
        var allAppVersionArray = new Array();
        var applicationList = getAllAppsOfUser(userName);
        var allStages = getAllStages();
        var parsedStages = parse(allStages);
        var parsedArray = parse(applicationList);

        for (var i = 0; i < parsedArray.length; i++) {
            var application = parsedArray[i];

            for (var j = 0; j < parsedStages.length; j++) {
                var stage = parsedStages[j];
                var hasPermissiontToStage = jagg.module("permission").hasPermissionToStage(application.key, stage);
                if (!hasPermissiontToStage) {
                    continue;
                }
                var appVersions = getAppVersionsInStage(stage, application.key, userName);
                if (appVersions != null) {
                    allAppVersionArray = allAppVersionArray.concat(appVersions);
                }
            }
        }

        return stringify(allAppVersionArray);
    }
    ;

    var getRetiredVersions = function(applicationKey, userName)
    {
        jagg.module("permission").checkUserActionPermission(applicationKey, PERMISSION_APPLICATION_MEMBER);
        var versionsArray = new Array();
        var retiredApp = getAppVersionsInStage("Retired", applicationKey, userName, false, false, false);
        if (retiredApp != null) {
            retiredApp = parse(retiredApp);
            if (retiredApp.length > 0) {
                var application = retiredApp[0];
                var versions = application.versions;
                for (var j = 0; j < versions.length; j++) {
                    var versionInfo = versions[j];
                    versionsArray.push(versionInfo.version);
                }
            }
        }
        return versionsArray;
    }
    ;

    var getAppVersionsInStages = function(applicationKey, userName, metaDataNeed, buildable, isRoleBasedPermissionAllowed)
    {
         jagg.module("permission").checkUserActionPermission(applicationKey, PERMISSION_APPLICATION_MEMBER);

        var applicatoinPath = APPLICATIONS + applicationKey;
        var artifacts =server.osgiService('org.wso2.carbon.appfactory.application.mgt.service.ApplicationManagementService').getAllVersionsOfApplication(applicationKey);
	    var versions = getVersionInfo(applicationKey, artifacts);
        if(versions !=null) {
            return stringify(versions);
        } else {
            return null;
        }
    };

var getStage = function(applicationKey, version) {
    jagg.module("permission").checkUserAuthenticated();
    return getApplicationManagementService().getStage(applicationKey, version);
};
    
var getVersionInfo = function(applicationKey, artifacts) {

        //send the call to the backend
        if (artifacts != undefined && artifacts.length > 0) {
            var appVersions = new Array();
            var applicationInfo = getAppInfo(applicationKey);
            if (applicationInfo != null && applicationInfo != undefined) {
                var arrVersions = new Array();
                var k = 0;
                for (var i = 0; i < artifacts.length ; i++) {
                    var versionInfo = {};
                    var element =artifacts[i];
                    versionInfo.version = element['version'];
                    versionInfo.autoDeployment = "true";
                    versionInfo.stage = element['stage'];
                    versionInfo.isAutoBuild = element['autoBuild'] ? "true" : "false" ;
                    versionInfo.isAutoDeploy = element['autoDeploy'] ? "true" : "false";
                    versionInfo.repoURL = getRepoURL(applicationKey, versionInfo.version, true);
                    versionInfo.lastBuildResult =element['lastBuildStatus']!=null ? element['lastBuildStatus'] : '';
                    versionInfo.deployedBuildId = element['lastDeployedId'];
                    log.info("Getting all versions >>>>>>****" + stringify(versionInfo));
                    arrVersions[k] = versionInfo;
                    k = k + 1;
                }

                arrVersions.sort(VersionComparator);

                //////applicationInfo.stage = stageName + '';
                applicationInfo.versions = arrVersions;
                appVersions[0] = applicationInfo;
            }
	        return appVersions;
        }
        return null;
};

    var getAppCountInStage = function(applicationKey, userName)
    {
        // no need to secure as internal call is secured.
        var versionArray = new Array();
        var allStages = getAllStages();

        for (var i = 0; i < allStages.length; i++) {
            var stageName = allStages[i];
            var versionEntry = {};
            versionEntry.stage = stageName;
            var applicationList = getAllAppVersionsInStage(stageName, applicationKey, userName);

            if (applicationList == null) {
                continue;
            }

            var versionCount = 0;
            for (var j = 0; j < applicationList.length; j++) {
                var applicationInfo = applicationList[j];

                if (applicationInfo == undefined) {
                    continue;
                }
                versionCount += applicationInfo.versions.length;
            }

            versionEntry.count = versionCount;
            versionArray[i] = versionEntry;
        }
        return versionArray;
    }
    ;


    var getRepoURL = function(applicationKey, version, auth)
    {
        if (auth) {
            jagg.module("permission").checkUserActionPermission(applicationKey, PERMISSION_APPLICATION_MEMBER);
        }
        var ws = require("ws");
        var repoMgtService = new ws.WSRequest();
        var options = new Array();
        options.useSOAP = 1.2;
        options.action = "urn:getURLForAppVersion";
        options["HTTPHeaders"] =[
        {
            name:
            "Cookie", value:modManager.getAdminCookie(getProperty(APPFACTORY_SERVER_URL))
        }
        ];

        var payload = '<p:getURLForAppVersion xmlns:p="http://service.mgt.repository.appfactory.carbon.wso2.org"><p:applicationKey>' + applicationKey + '</p:applicationKey><p:version>' + version + '</p:version></p:getURLForAppVersion>';
        var result;

        try {
        	var endPoint = getProperty(APPFACTORY_SERVER_URL) + "RepositoryManagementService";
        	repoMgtService.open(options,endPoint, false);
        	repoMgtService.send(payload);
        	result = repoMgtService.responseE4X;
        	var ns = new Namespace("http://service.mgt.repository.appfactory.carbon.wso2.org");
        	var response = result.ns::["return"].text();
        	return response;
        } catch (e) {
        	log.error("Error while getting application of user \n" + e.message);
        	throw "Error while getting repository urls";
        }
    }
    ;

// Todo: seems like this method is not used, remove when refactoring jaggery app.
    var invokeFileDownload = function()
    {

        var ws = require("ws");
        var fileDownloadRqst = new ws.WSRequest();
        var options = new Array();
        options.useSOAP = 1.2;
        options.action = "urn:downloadArchivedLogFiles";

        var payload = '<p:downloadArchivedLogFiles xmlns:p="http://org.apache.axis2/xsd"><logFile xmlns="http://org.apache.axis2/xsd">0.Application_Server.2012_09_23.gz</logFile></p:downloadArchivedLogFiles>';
        var result;

        try {
            var endPoint = 'https://appserver.dev.example.com:8253/services/LogViewer';
            fileDownloadRqst.open(options, endPoint, false,getProperty(ADMIN_USERNAME), getProperty(ADMIN_PASSWORD));
            fileDownloadRqst.send(payload);
            result = fileDownloadRqst.responseE4X;
            var ns = new Namespace("http://org.apache.axis2/xsd");
            var elements = result.ns::["return"].text();
            return elements;
        } catch (e) {
            log.error("Error while getting application of user \n" + e.message);
            throw "Error while getting repository urls";
        }
    }
    ;

    var invokeRetrieveArtifactId = function(applicationKey, version, revision)
    {
        jagg.module("permission").checkUserActionPermission(applicationKey, PERMISSION_APPLICATION_MEMBER);
        var ws = require('ws');
        var retrieveArtifactIdProcess = new ws.WSRequest();
        var options = new Array();
        options.useSOAP = 1.1;
        options.action = "urn:retrieveArtifactId";
        options["HTTPHeaders"] =[{
        	name: "Cookie", value:modManager.getAdminCookie(getProperty(APPFACTORY_SERVER_URL))
        	}];
        var payload = '<p:RetrieveArtifactIdRequest xmlns:p="http://retrieve.core.appfactory.carbon.wso2.org"><p:applicationId>' + applicationKey + '</p:applicationId><p:version>' + version + '</p:version><p:revision>' + revision + '</p:revision></p:RetrieveArtifactIdRequest>';
        var result;

        try {
        	var endPoint = getProperty(APPFACTORY_SERVER_URL) + 'RetrieveArtifactService';
        	retrieveArtifactIdProcess.open(options,endPoint, false);
        	retrieveArtifactIdProcess.send(payload);
        	result = retrieveArtifactIdProcess.responseE4X;
        	var resultNS = new Namespace("http://retrieve.core.appfactory.carbon.wso2.org");
        	if (applicationInfo.type == 'car') {
        		versionInfo.accessUrl = applicationMetaData.accessURLMD;
        	} else if (applicationInfo.type == 'war' || applicationInfo.type == 'jaggery') {
        		if (applicationMetaData.accessURLMD != '') {
        			versionInfo.accessUrl = applicationMetaData.baseURLMD + applicationMetaData.accessURLMD;
        		} else {
        			versionInfo.accessUrl = "unknown";
        		}
        	} else if (applicationInfo.type == 'dbs') {
        		versionInfo.accessUrl = "DBS";
        	}

        	if (log.isDebugEnabled()) {
        		log.debug("Invoking service endpoint:" + endPoint + " returned result:" + result);
        	}
        	return artifactDetails;
        } catch (e) {
        	log.error("Error while retrieving the artifact id" + applicationKey + "\n" + e.message);
        	throw "Error while retrieving the artifact id" + applicationKey;
        }
    }
    var getMetaDataForServiceState = function
    getMetaDataForServiceState(applicationKey, version, stage, state, type)
    {
        var metaDataResult = {};


        var stageURL = getProperty("ApplicationDeployment.DeploymentStage." + stage + ".DeploymentServerURL");
        var appBaseURL = getProperty("ApplicationDeployment.DeploymentStage." + stage + ".BaseAccessUrl");
        var serviceName;
        serviceName = applicationKey + '-' + version;
        if (version == 'trunk') {
            serviceName = applicationKey + '-SNAPSHOT';
        }
        var ws = require("ws");
        var serviceAdminService = new ws.WSRequest();
        var options = new Array();
        options.useSOAP = 1.2;
        var payload = "";

        options.action = "urn:getServiceData";
        payload = '<xsd:getServiceData xmlns:xsd="http://org.apache.axis2/xsd"><xsd:serviceName xmlns:xsd="http://org.apache.axis2/xsd">' + serviceName + '</xsd:serviceName></xsd:getServiceData>';

        var endPoint = stageURL + "ServiceAdmin";

        var ns = new Namespace("http://mgt.application.carbon.wso2.org");
        var ax2413 = new Namespace("http://mgt.application.carbon.wso2.org/xsd");
        try {
        	serviceAdminService.open(options,endPoint, false, getProperty(ADMIN_USERNAME) + '@' + applicationKey, getProperty(ADMIN_PASSWORD));
        	serviceAdminService.send(payload);
        } catch (e) {
        	metaDataResult.accessURLMD = "";
        	metaDataResult.baseURLMD = "";
        	metaDataResult.appStatusMD = "faulty";
        	log.error("Get MetaData from " + stage + " Server. Server Problem : " + e.toString());
        	return metaDataResult;
        }
        result = serviceAdminService.responseE4X;
        var elements = result. *::["return"].*::eprs;
        var urls ="";
        for (var url in elements){	// iterate elements and only take url which is https, and prepare service URL.
        	var temUrl = elements[url].text()+"";
        	if (temUrl.indexOf("https://")==0) {	// as requested, now app types 'bpel' or 'dbs' only supports https://, TODO: based on user requirement need to develop either http or https 
        		temUrl = temUrl.substring(0, temUrl.length-1);	// remove last character and append '?wsdl' to the end of URL
        		urls = temUrl + "?wsdl";	     		
        		break;
        	}
        }
        metaDataResult.accessURLMD = urls;
        metaDataResult.baseURLMD = appBaseURL;
        metaDataResult.appStatusMD = "started";

        return metaDataResult;
    }


%>
