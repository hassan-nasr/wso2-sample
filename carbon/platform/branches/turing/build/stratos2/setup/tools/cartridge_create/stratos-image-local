#!/bin/bash

# Die on any error:
set -e

work_dir=""
new_image=""
image_root="/tmp"
image_template="default"
software=""
new_image_size="" #In GB
action=""
original_image=""
image_type="qcow2"

function help {
    echo "Usage: stratos-image-local [optional arguments] <action> <mandatory arguments>"
    echo "    Action can be one of the following"
    echo "        create : Mount the base image and customize it according to the given arguments"
    echo "        pack : Archive the newly created image and unmount the base image"
    echo ""
    echo "    Mandatory and optional arguments depend on the action. Following is the list of usages for each action"
    echo ""
    echo "    Usage for action create:"
    echo "        stratos-image-local -r <image root> -t <image template> -s <software> -n <new image size> create <path to original image>"
    echo ""
    echo "            -r : Image root - This is where the base image is mounted. Default is /tmp"
    echo "            -t : Template for the new image. Default is no template"
    echo "            -s : Softwared to be copied to the new image, separated by colon(:). Default is none"
    echo "            -n : Image size of the new image in GB. Default is the size of the base image"
    echo "            -v : Image type. This is one of qcow2 or row"
    echo ""
    echo "    Usage for action pack:"
    echo "        stratos-image-local -r <image root> -t <image template> pack <new image archive name in tar.gz format>"
    echo ""
    echo "            -r : Image root - This is where the base image is mounted. Default is /tmp"
    echo "            -t : Template for the new image. Default is no template"
    echo "            -v : Image type. This is one of qcow2 or row"
    echo ""
    echo "    Usage for action mount:"
    echo "        stratos-image-local -r <image root> -t <image template> mount <path to original image>"
    echo ""
    echo "            -r : Image root - This is where the base image is mounted. Default is /tmp"
    echo "            -t : Template for the new image. Default is no template"
    echo "            -v : Image type. This is one of qcow2 or row"
    echo ""
    echo "    Usage for action unmount:"
    echo "        stratos-image-local -r <image root> -t <image template>  unmount"
    echo ""
    echo "            -r : Image root - This is where the base image is mounted. Default is /tmp"
    echo "            -t : Template for the new image. Default is no template"
    echo "            -v : Image type. This is one of qcow2 or row"
    echo ""
}

function image_validate {

if [[ ( -z $action || ( -n $action && $action == "help" ) ) ]]; then
    help
    exit 1
fi

if [[ ( -z $action || ( -n $action && !( $action == "create" || $action == "pack" || $action == "mount" || $action == "unmount" ) ) ) ]]; then
        echo "Mandatory parameter action with value create or pack should be provided"
        echo "    create : Mount the base image and customize it according to the given arguments"
        echo "    pack : Archive the newly created image and unmount the base image"
        echo ""
        exit 1
    fi

if [[ ( -n $action && $action == "create" && -z $original_image ) ]]; then
        echo "Usage:"
        echo "    stratos-image-local -r <image root> -t <image template> -s <software> -n <new image size> -v <image type> create <path to original image>"
        echo ""
        echo "        -r : Image root - This is where the base image is mounted. Default is /tmp"
        echo "        -t : Template for the new image. Default is no template"
        echo "        -s : Softwared to be copied to the new image, separated by colon(:). Default is none"
        echo "        -n : Image size of the new image in GB. Default is the size of the base image"
        echo "        -v : Image type. qcow2 or raw. Default is qcow2"
        echo ""
        exit 1
fi

if [[ ( -n $action && $action == "pack" && -z $new_image ) ]]; then
        echo "Usage:"
        echo "    stratos-image-local -r <image root> -t <image template pack <new image archive name in tar.gz format>"
        echo ""
        echo "        -r : Image root - This is where the base image is mounted. Default is /tmp"
        echo "        -t : Template for the new image. Default is no template"
        echo "        -v : Image type. qcow2 or raw. Default is qcow2"
        echo ""
        exit 1
fi

if [[ ( -n $action && $action == "mount" && -z $original_image ) ]]; then
        echo "Usage:"
        echo "    stratos-image-local -r <image root> -t <image template> -v <image type> mount <path to original image>"
        echo ""
        echo "        -r : Image root - This is where the base image is mounted. Default is /tmp"
        echo "        -t : Template for the new image. Default is no template"
        echo "        -v : Image type. qcow2 or raw. Default is qcow2"
        echo ""
        exit 1
fi

}

# Make sure the user is running as root.
if [ "$UID" -ne "0" ]; then
	echo ; echo "  You must be root to run $0.  (Try running 'sudo bash' first.)" ; echo 
	exit 69
fi

while getopts r:t:s:n:v: opts
do
  case $opts in
    r)
        image_root=${OPTARG}
        ;;
    t)
        image_template=${OPTARG}
        ;;
    s)
        software=${OPTARG}
        ;;
    n)
        new_image_size=${OPTARG}
        ;;
    v)
        image_type=${OPTARG}
        ;;
    *)
        help
        exit 1
        ;;
  esac
done
shift $((OPTIND-1))
action=$1
if [[ $action == "create" ]]; then
    original_image=$2
elif [[ $action == "pack" ]]; then
    new_image=$2
elif [[ $action == "mount" ]]; then
    original_image=$2
fi

image_validate

work_dir="$image_root/$image_template"
img_dir="$work_dir/image"

if [[ $action == "create" ]]; then
    if [ $image_type = "qcow2" ]; then
        let "new_image_size=$new_image_size*1024*1024*1024"
        new_image_size=+$new_image_size
        echo "qcow2 new_image_size:$new_image_size"
    else
        new_image_size=$new_image_size"G"
        echo "raw new_image_size:$new_image_size"
    fi
fi

if [[ $action == "create" ]]; then

    if [ -d ./$work_dir ]; then
        rm -rf ./$work_dir
    fi

    mkdir -p $work_dir

    if [ ! -d $img_dir ]; then
        mkdir -p $img_dir
    fi

    pushd $img_dir
    type=`echo $original_image|awk -F . '{print $NF}'`
    if [[ $type == "zip" ]]; then
        zip -rq $original_image
    elif [[ $type == "gz" || $type == "tgz" ]]; then
        tar -zxf $original_image
    else
        cp -f $original_image ./
    fi
    popd
    echo $img_dir
    image_image=`ls $img_dir/*.img`
    echo $image_image
    if [ -z $new_image_size ]; then
        echo "Image will not be resized since new image size is not provided"
    else
        echo "Resizing the original image"
        if [ $image_type = "qcow2" ]; then
            qemu-img resize $image_image $new_image_size
        else
            fsck.ext3 -f $image_image
            resize2fs $image_image $new_image_size
        fi
    fi

    echo "Mount the original image"
    ./image_action.sh action=mount image-template=$image_template image-root=$image_root image-image=$image_image image-type=$image_type
    echo "Original image mounted"
    read

    if [[ !( $image_template == "default" ) ]]; then
    	echo "Customizing the original image"
    	./image_action.sh action=create image-template=$image_template image-root=$image_root software=$software image-type=$image_type
    fi

fi

if [[ $action == "pack" ]]; then
    echo "Archiving the new image"
    pushd $work_dir/image
    type=`echo $new_image|awk -F . '{print $NF}'`
    if [[ $type == "zip" ]]; then
        zip -rq $new_image ./*
    elif [[ $type == "gz" || $type == "tgz" ]]; then
        tar -zcf $new_image ./*
    elif [[ $type == "img" ]]; then
        mv *.img $new_image
    fi

    popd
    echo "Unmounting"
    ./image_action.sh action=unmount image-template=$image_template image-root=$image_root image-type=$image_type
fi

if [[ $action == "mount" ]]; then
    if [ -d ./$work_dir ]; then
        rm -rf ./$work_dir
    fi

    mkdir -p $work_dir

    if [ ! -d $img_dir ]; then
        mkdir -p $img_dir
    fi

    pushd $img_dir
    type=`echo $original_image|awk -F . '{print $NF}'`
    if [[ $type == "zip" ]]; then
        zip -rq $original_image
    elif [[ $type == "gz" || $type == "tgz" ]]; then
        tar -zxf $original_image
    else
        cp -f $original_image ./
    fi
    popd
    echo $img_dir
    image_image=`ls $img_dir/*.img`
    echo $image_image

    echo "Mount the image"
    ./image_action.sh action=mount image-template=$image_template image-root=$image_root image-image=$image_image image-type=$image_type
    echo "Mounted the image"
fi

if [[ $action == "unmount" ]]; then
    echo "Unmount the image"

    ./image_action.sh action=unmount image-template=$image_template image-root=$image_root image-type=$image_type
    echo "Unmounted the image"
fi

echo "Done"

